{
	"scope": "source.lua",

	"completions":
	[
		{ "trigger": "AddMediaItemToTrack", "contents": "reaper.AddMediaItemToTrack${(1:${MediaTrack tr})" },
		{ "trigger": "AddProjectMarker", "contents": "reaper.AddProjectMarker(${1:ReaProject proj},${2:boolean isrgn},${3:number pos},${4:number rgnend},${5:string name},${6:integer wantidx})" },
		{ "trigger": "AddProjectMarker2", "contents": "reaper.AddProjectMarker2(${1:ReaProject proj},${2:boolean isrgn},${3:number pos},${4:number rgnend},${5:string name},${6:integer wantidx},${7:integer color})" },
		{ "trigger": "AddRemoveReaScript", "contents": "reaper.AddRemoveReaScript(${1:boolean add},${2:integer sectionID},${3:string scriptfn},${4:boolean commit})" },
		{ "trigger": "AddTakeToMediaItem", "contents": "reaper.AddTakeToMediaItem(${1:MediaItem item})" },
		{ "trigger": "AddTempoTimeSigMarker", "contents": "reaper.AddTempoTimeSigMarker(${1:ReaProject proj},${2:number timepos},${3:number bpm},${4:integer timesig_num},${5:integer timesig_denom},${6:boolean lineartempochange})" },
		{ "trigger": "adjustZoom", "contents": "reaper.adjustZoom(${1:number amt},${2:integer forceset},${3:boolean doupd},${4:integer centermode})" },
		{ "trigger": "AnyTrackSolo", "contents": "reaper.AnyTrackSolo(${1:ReaProject proj})" },
		{ "trigger": "APITest", "contents": "reaper.APITest()" },
		{ "trigger": "ApplyNudge", "contents": "reaper.ApplyNudge(${1:ReaProject project},${2:integer nudgeflag},${3:integer nudgewhat},${4:integer nudgeunits},${5:number value},${6:boolean reverse},${7:integer copies})" },
		{ "trigger": "Audio_Init", "contents": "reaper.Audio_Init()" },
		{ "trigger": "Audio_IsPreBuffer", "contents": "reaper.Audio_IsPreBuffer()" },
		{ "trigger": "Audio_IsRunning", "contents": "reaper.Audio_IsRunning()" },
		{ "trigger": "Audio_Quit", "contents": "reaper.Audio_Quit()" },
		{ "trigger": "AudioAccessorValidateState", "contents": "reaper.AudioAccessorValidateState(${1:AudioAccessor accessor})" },
		{ "trigger": "BypassFxAllTracks", "contents": "reaper.BypassFxAllTracks(${1:integer bypass})" },
		{ "trigger": "ClearAllRecArmed", "contents": "reaper.ClearAllRecArmed()" },
		{ "trigger": "ClearConsole", "contents": "reaper.ClearConsole()" },
		{ "trigger": "ClearPeakCache", "contents": "reaper.ClearPeakCache()" },
		{ "trigger": "ColorFromNative", "contents": "reaper.ColorFromNative(${1:integer col})" },
		{ "trigger": "ColorToNative", "contents": "reaper.ColorToNative(${1:integer r},${2:integer g},${3:integer b})" },
		{ "trigger": "CountEnvelopePoints", "contents": "reaper.CountEnvelopePoints(${1:TrackEnvelope envelope})" },
		{ "trigger": "CountMediaItems", "contents": "reaper.CountMediaItems(${1:ReaProject proj})" },
		{ "trigger": "CountProjectMarkers", "contents": "reaper.CountProjectMarkers(${1:ReaProject proj})" },
		{ "trigger": "CountSelectedMediaItems", "contents": "reaper.CountSelectedMediaItems(${1:ReaProject proj})" },
		{ "trigger": "CountSelectedTracks", "contents": "reaper.CountSelectedTracks(${1:ReaProject proj})" },
		{ "trigger": "CountSelectedTracks2", "contents": "reaper.CountSelectedTracks2(${1:ReaProject proj},${2:boolean wantmaster})" },
		{ "trigger": "CountTakeEnvelopes", "contents": "reaper.CountTakeEnvelopes(${1:MediaItem_Take take})" },
		{ "trigger": "CountTakes", "contents": "reaper.CountTakes(${1:MediaItem item})" },
		{ "trigger": "CountTCPFXParms", "contents": "reaper.CountTCPFXParms(${1:ReaProject project},${2:MediaTrack track})" },
		{ "trigger": "CountTempoTimeSigMarkers", "contents": "reaper.CountTempoTimeSigMarkers(${1:ReaProject proj})" },
		{ "trigger": "CountTrackEnvelopes", "contents": "reaper.CountTrackEnvelopes(${1:MediaTrack track})" },
		{ "trigger": "CountTrackMediaItems", "contents": "reaper.CountTrackMediaItems(${1:MediaTrack track})" },
		{ "trigger": "CountTracks", "contents": "reaper.CountTracks(${1:ReaProject proj})" },
		{ "trigger": "CreateNewMIDIItemInProj", "contents": "reaper.CreateNewMIDIItemInProj(${1:MediaTrack track},${2:number starttime},${3:number endtime},${4:optional boolean qnInOptional})" },
		{ "trigger": "CreateTakeAudioAccessor", "contents": "reaper.CreateTakeAudioAccessor(${1:MediaItem_Take take})" },
		{ "trigger": "CreateTrackAudioAccessor", "contents": "reaper.CreateTrackAudioAccessor(${1:MediaTrack track})" },
		{ "trigger": "CreateTrackSend", "contents": "reaper.CreateTrackSend(${1:MediaTrack tr},${2:MediaTrack desttrInOptional})" },
		{ "trigger": "CSurf_FlushUndo", "contents": "reaper.CSurf_FlushUndo(${1:boolean force})" },
		{ "trigger": "CSurf_GetTouchState", "contents": "reaper.CSurf_GetTouchState(${1:MediaTrack trackid},${2:integer isPan})" },
		{ "trigger": "CSurf_GoEnd", "contents": "reaper.CSurf_GoEnd()" },
		{ "trigger": "CSurf_GoStart", "contents": "reaper.CSurf_GoStart()" },
		{ "trigger": "CSurf_NumTracks", "contents": "reaper.CSurf_NumTracks(${1:boolean mcpView})" },
		{ "trigger": "CSurf_OnArrow", "contents": "reaper.CSurf_OnArrow(${1:integer whichdir},${2:boolean wantzoom})" },
		{ "trigger": "CSurf_OnFwd", "contents": "reaper.CSurf_OnFwd(${1:integer seekplay})" },
		{ "trigger": "CSurf_OnFXChange", "contents": "reaper.CSurf_OnFXChange(${1:MediaTrack trackid},${2:integer en})" },
		{ "trigger": "CSurf_OnInputMonitorChange", "contents": "reaper.CSurf_OnInputMonitorChange(${1:MediaTrack trackid},${2:integer monitor})" },
		{ "trigger": "CSurf_OnInputMonitorChangeEx", "contents": "reaper.CSurf_OnInputMonitorChangeEx(${1:MediaTrack trackid},${2:integer monitor},${3:boolean allowgang})" },
		{ "trigger": "CSurf_OnMuteChange", "contents": "reaper.CSurf_OnMuteChange(${1:MediaTrack trackid},${2:integer mute})" },
		{ "trigger": "CSurf_OnMuteChangeEx", "contents": "reaper.CSurf_OnMuteChangeEx(${1:MediaTrack trackid},${2:integer mute},${3:boolean allowgang})" },
		{ "trigger": "CSurf_OnPanChange", "contents": "reaper.CSurf_OnPanChange(${1:MediaTrack trackid},${2:number pan},${3:boolean relative})" },
		{ "trigger": "CSurf_OnPanChangeEx", "contents": "reaper.CSurf_OnPanChangeEx(${1:MediaTrack trackid},${2:number pan},${3:boolean relative},${4:boolean allowGang})" },
		{ "trigger": "CSurf_OnPause", "contents": "reaper.CSurf_OnPause()" },
		{ "trigger": "CSurf_OnPlay", "contents": "reaper.CSurf_OnPlay()" },
		{ "trigger": "CSurf_OnPlayRateChange", "contents": "reaper.CSurf_OnPlayRateChange(${1:number playrate})" },
		{ "trigger": "CSurf_OnRecArmChange", "contents": "reaper.CSurf_OnRecArmChange(${1:MediaTrack trackid},${2:integer recarm})" },
		{ "trigger": "CSurf_OnRecArmChangeEx", "contents": "reaper.CSurf_OnRecArmChangeEx(${1:MediaTrack trackid},${2:integer recarm},${3:boolean allowgang})" },
		{ "trigger": "CSurf_OnRecord", "contents": "reaper.CSurf_OnRecord()" },
		{ "trigger": "CSurf_OnRecvPanChange", "contents": "reaper.CSurf_OnRecvPanChange(${1:MediaTrack trackid},${2:integer recv_index},${3:number pan},${4:boolean relative})" },
		{ "trigger": "CSurf_OnRecvVolumeChange", "contents": "reaper.CSurf_OnRecvVolumeChange(${1:MediaTrack trackid},${2:integer recv_index},${3:number volume},${4:boolean relative})" },
		{ "trigger": "CSurf_OnRew", "contents": "reaper.CSurf_OnRew(${1:integer seekplay})" },
		{ "trigger": "CSurf_OnRewFwd", "contents": "reaper.CSurf_OnRewFwd(${1:integer seekplay},${2:integer dir})" },
		{ "trigger": "CSurf_OnScroll", "contents": "reaper.CSurf_OnScroll(${1:integer xdir},${2:integer ydir})" },
		{ "trigger": "CSurf_OnSelectedChange", "contents": "reaper.CSurf_OnSelectedChange(${1:MediaTrack trackid},${2:integer selected})" },
		{ "trigger": "CSurf_OnSendPanChange", "contents": "reaper.CSurf_OnSendPanChange(${1:MediaTrack trackid},${2:integer send_index},${3:number pan},${4:boolean relative})" },
		{ "trigger": "CSurf_OnSendVolumeChange", "contents": "reaper.CSurf_OnSendVolumeChange(${1:MediaTrack trackid},${2:integer send_index},${3:number volume},${4:boolean relative})" },
		{ "trigger": "CSurf_OnSoloChange", "contents": "reaper.CSurf_OnSoloChange(${1:MediaTrack trackid},${2:integer solo})" },
		{ "trigger": "CSurf_OnSoloChangeEx", "contents": "reaper.CSurf_OnSoloChangeEx(${1:MediaTrack trackid},${2:integer solo},${3:boolean allowgang})" },
		{ "trigger": "CSurf_OnStop", "contents": "reaper.CSurf_OnStop()" },
		{ "trigger": "CSurf_OnTempoChange", "contents": "reaper.CSurf_OnTempoChange(${1:number bpm})" },
		{ "trigger": "CSurf_OnTrackSelection", "contents": "reaper.CSurf_OnTrackSelection(${1:MediaTrack trackid})" },
		{ "trigger": "CSurf_OnVolumeChange", "contents": "reaper.CSurf_OnVolumeChange(${1:MediaTrack trackid},${2:number volume},${3:boolean relative})" },
		{ "trigger": "CSurf_OnVolumeChangeEx", "contents": "reaper.CSurf_OnVolumeChangeEx(${1:MediaTrack trackid},${2:number volume},${3:boolean relative},${4:boolean allowGang})" },
		{ "trigger": "CSurf_OnWidthChange", "contents": "reaper.CSurf_OnWidthChange(${1:MediaTrack trackid},${2:number width},${3:boolean relative})" },
		{ "trigger": "CSurf_OnWidthChangeEx", "contents": "reaper.CSurf_OnWidthChangeEx(${1:MediaTrack trackid},${2:number width},${3:boolean relative},${4:boolean allowGang})" },
		{ "trigger": "CSurf_OnZoom", "contents": "reaper.CSurf_OnZoom(${1:integer xdir},${2:integer ydir})" },
		{ "trigger": "CSurf_ResetAllCachedVolPanStates", "contents": "reaper.CSurf_ResetAllCachedVolPanStates()" },
		{ "trigger": "CSurf_ScrubAmt", "contents": "reaper.CSurf_ScrubAmt(${1:number amt})" },
		{ "trigger": "CSurf_SetAutoMode", "contents": "reaper.CSurf_SetAutoMode(${1:integer mode},${2:IReaperControlSurface ignoresurf})" },
		{ "trigger": "CSurf_SetPlayState", "contents": "reaper.CSurf_SetPlayState(${1:boolean play},${2:boolean pause},${3:boolean rec},${4:IReaperControlSurface ignoresurf})" },
		{ "trigger": "CSurf_SetRepeatState", "contents": "reaper.CSurf_SetRepeatState(${1:boolean rep},${2:IReaperControlSurface ignoresurf})" },
		{ "trigger": "CSurf_SetSurfaceMute", "contents": "reaper.CSurf_SetSurfaceMute(${1:MediaTrack trackid},${2:boolean mute},${3:IReaperControlSurface ignoresurf})" },
		{ "trigger": "CSurf_SetSurfacePan", "contents": "reaper.CSurf_SetSurfacePan(${1:MediaTrack trackid},${2:number pan},${3:IReaperControlSurface ignoresurf})" },
		{ "trigger": "CSurf_SetSurfaceRecArm", "contents": "reaper.CSurf_SetSurfaceRecArm(${1:MediaTrack trackid},${2:boolean recarm},${3:IReaperControlSurface ignoresurf})" },
		{ "trigger": "CSurf_SetSurfaceSelected", "contents": "reaper.CSurf_SetSurfaceSelected(${1:MediaTrack trackid},${2:boolean selected},${3:IReaperControlSurface ignoresurf})" },
		{ "trigger": "CSurf_SetSurfaceSolo", "contents": "reaper.CSurf_SetSurfaceSolo(${1:MediaTrack trackid},${2:boolean solo},${3:IReaperControlSurface ignoresurf})" },
		{ "trigger": "CSurf_SetSurfaceVolume", "contents": "reaper.CSurf_SetSurfaceVolume(${1:MediaTrack trackid},${2:number volume},${3:IReaperControlSurface ignoresurf})" },
		{ "trigger": "CSurf_SetTrackListChange", "contents": "reaper.CSurf_SetTrackListChange()" },
		{ "trigger": "CSurf_TrackFromID", "contents": "reaper.CSurf_TrackFromID(${1:integer idx},${2:boolean mcpView})" },
		{ "trigger": "CSurf_TrackToID", "contents": "reaper.CSurf_TrackToID(${1:MediaTrack track},${2:boolean mcpView})" },
		{ "trigger": "DB2SLIDER", "contents": "reaper.DB2SLIDER(${1:number x})" },
		{ "trigger": "DeleteEnvelopePointRange", "contents": "reaper.DeleteEnvelopePointRange(${1:TrackEnvelope envelope},${2:number time_start},${3:number time_end})" },
		{ "trigger": "DeleteExtState", "contents": "reaper.DeleteExtState(${1:string section},${2:string key},${3:boolean persist})" },
		{ "trigger": "DeleteProjectMarker", "contents": "reaper.DeleteProjectMarker(${1:ReaProject proj},${2:integer markrgnindexnumber},${3:boolean isrgn})" },
		{ "trigger": "DeleteProjectMarkerByIndex", "contents": "reaper.DeleteProjectMarkerByIndex(${1:ReaProject proj},${2:integer markrgnidx})" },
		{ "trigger": "DeleteTakeStretchMarkers", "contents": "reaper.DeleteTakeStretchMarkers(${1:MediaItem_Take take},${2:integer idx},${3:optional number countInOptional})" },
		{ "trigger": "DeleteTempoTimeSigMarker", "contents": "reaper.DeleteTempoTimeSigMarker(${1:ReaProject project},${2:integer markerindex})" },
		{ "trigger": "DeleteTrack", "contents": "reaper.DeleteTrack(${1:MediaTrack tr})" },
		{ "trigger": "DeleteTrackMediaItem", "contents": "reaper.DeleteTrackMediaItem(${1:MediaTrack tr},${2:MediaItem it})" },
		{ "trigger": "DestroyAudioAccessor", "contents": "reaper.DestroyAudioAccessor(${1:AudioAccessor accessor})" },
		{ "trigger": "Dock_UpdateDockID", "contents": "reaper.Dock_UpdateDockID(${1:string ident_str},${2:integer whichDock})" },
		{ "trigger": "DockIsChildOfDock", "contents": "reaper.DockIsChildOfDock(${1:HWND hwnd})" },
		{ "trigger": "DockWindowActivate", "contents": "reaper.DockWindowActivate(${1:HWND hwnd})" },
		{ "trigger": "DockWindowAdd", "contents": "reaper.DockWindowAdd(${1:HWND hwnd},${2:string name},${3:integer pos},${4:boolean allowShow})" },
		{ "trigger": "DockWindowAddEx", "contents": "reaper.DockWindowAddEx(${1:HWND hwnd},${2:string name},${3:string identstr},${4:boolean allowShow})" },
		{ "trigger": "DockWindowRefresh", "contents": "reaper.DockWindowRefresh()" },
		{ "trigger": "DockWindowRefreshForHWND", "contents": "reaper.DockWindowRefreshForHWND(${1:HWND hwnd})" },
		{ "trigger": "DockWindowRemove", "contents": "reaper.DockWindowRemove(${1:HWND hwnd})" },
		{ "trigger": "EditTempoTimeSigMarker", "contents": "reaper.EditTempoTimeSigMarker(${1:ReaProject project},${2:integer markerindex})" },
		{ "trigger": "EnsureNotCompletelyOffscreen", "contents": "reaper.EnsureNotCompletelyOffscreen()" },
		{ "trigger": "EnumerateFiles", "contents": "reaper.EnumerateFiles(${1:string path},${2:integer fileindex})" },
		{ "trigger": "EnumerateSubdirectories", "contents": "reaper.EnumerateSubdirectories(${1:string path},${2:integer subdirindex})" },
		{ "trigger": "EnumPitchShiftModes", "contents": "reaper.EnumPitchShiftModes(${1:integer mode})" },
		{ "trigger": "EnumPitchShiftSubModes", "contents": "reaper.EnumPitchShiftSubModes(${1:integer mode},${2:integer submode})" },
		{ "trigger": "EnumProjectMarkers", "contents": "reaper.EnumProjectMarkers(${1:integer idx})" },
		{ "trigger": "EnumProjectMarkers2", "contents": "reaper.EnumProjectMarkers2(${1:ReaProject proj},${2:integer idx})" },
		{ "trigger": "EnumProjectMarkers3", "contents": "reaper.EnumProjectMarkers3(${1:ReaProject proj},${2:integer idx})" },
		{ "trigger": "EnumProjects", "contents": "reaper.EnumProjects(${1:integer idx},${2:string projfn})" },
		{ "trigger": "EnumProjExtState", "contents": "reaper.EnumProjExtState(${1:ReaProject proj},${2:string extname},${3:integer idx})" },
		{ "trigger": "EnumRegionRenderMatrix", "contents": "reaper.EnumRegionRenderMatrix(${1:ReaProject proj},${2:integer regionindex},${3:integer rendertrack})" },
		{ "trigger": "EnumTrackMIDIProgramNames", "contents": "reaper.EnumTrackMIDIProgramNames(${1:integer track},${2:integer programNumber},${3:string programName})" },
		{ "trigger": "EnumTrackMIDIProgramNamesEx", "contents": "reaper.EnumTrackMIDIProgramNamesEx(${1:ReaProject proj},${2:MediaTrack track},${3:integer programNumber},${4:string programName})" },
		{ "trigger": "Envelope_Evaluate", "contents": "reaper.Envelope_Evaluate(${1:TrackEnvelope envelope},${2:number time},${3:number samplerate},${4:integer samplesRequested})" },
		{ "trigger": "Envelope_FormatValue", "contents": "reaper.Envelope_FormatValue(${1:TrackEnvelope env},${2:number value})" },
		{ "trigger": "Envelope_SortPoints", "contents": "reaper.Envelope_SortPoints(${1:TrackEnvelope envelope})" },
		{ "trigger": "ExecProcess", "contents": "reaper.ExecProcess(${1:string cmdline},${2:integer timeoutmsec})" },
		{ "trigger": "file_exists", "contents": "reaper.file_exists(${1:string path})" },
		{ "trigger": "FindTempoTimeSigMarker", "contents": "reaper.FindTempoTimeSigMarker(${1:ReaProject project},${2:number time})" },
		{ "trigger": "format_timestr", "contents": "reaper.format_timestr(${1:number tpos},${2:string buf})" },
		{ "trigger": "format_timestr_len", "contents": "reaper.format_timestr_len(${1:number tpos},${2:string buf},${3:number offset},${4:integer modeoverride})" },
		{ "trigger": "format_timestr_pos", "contents": "reaper.format_timestr_pos(${1:number tpos},${2:string buf},${3:integer modeoverride})" },
		{ "trigger": "genGuid", "contents": "reaper.genGuid(${1:string gGUID})" },
		{ "trigger": "get_ini_file", "contents": "reaper.get_ini_file()" },
		{ "trigger": "GetActiveTake", "contents": "reaper.GetActiveTake(${1:MediaItem item})" },
		{ "trigger": "GetAllProjectPlayStates", "contents": "reaper.GetAllProjectPlayStates(${1:ReaProject ignoreProject})" },
		{ "trigger": "GetAppVersion", "contents": "reaper.GetAppVersion()" },
		{ "trigger": "GetAudioAccessorEndTime", "contents": "reaper.GetAudioAccessorEndTime(${1:AudioAccessor accessor})" },
		{ "trigger": "GetAudioAccessorHash", "contents": "reaper.GetAudioAccessorHash(${1:AudioAccessor accessor},${2:string hashNeed128})" },
		{ "trigger": "GetAudioAccessorSamples", "contents": "reaper.GetAudioAccessorSamples(${1:AudioAccessor accessor},${2:integer samplerate},${3:integer numchannels},${4:number starttime_sec},${5:integer numsamplesperchannel},${6:reaper.array samplebuffer})" },
		{ "trigger": "GetAudioAccessorStartTime", "contents": "reaper.GetAudioAccessorStartTime(${1:AudioAccessor accessor})" },
		{ "trigger": "GetConfigWantsDock", "contents": "reaper.GetConfigWantsDock(${1:string ident_str})" },
		{ "trigger": "GetCurrentProjectInLoadSave", "contents": "reaper.GetCurrentProjectInLoadSave()" },
		{ "trigger": "GetCursorContext", "contents": "reaper.GetCursorContext()" },
		{ "trigger": "GetCursorContext2", "contents": "reaper.GetCursorContext2(${1:boolean want_last_valid})" },
		{ "trigger": "GetCursorPosition", "contents": "reaper.GetCursorPosition()" },
		{ "trigger": "GetCursorPositionEx", "contents": "reaper.GetCursorPositionEx(${1:ReaProject proj})" },
		{ "trigger": "GetDisplayedMediaItemColor", "contents": "reaper.GetDisplayedMediaItemColor(${1:MediaItem item})" },
		{ "trigger": "GetDisplayedMediaItemColor2", "contents": "reaper.GetDisplayedMediaItemColor2(${1:MediaItem item},${2:MediaItem_Take take})" },
		{ "trigger": "GetEnvelopeName", "contents": "reaper.GetEnvelopeName(${1:TrackEnvelope env},${2:string buf})" },
		{ "trigger": "GetEnvelopePoint", "contents": "reaper.GetEnvelopePoint(${1:TrackEnvelope envelope},${2:integer ptidx})" },
		{ "trigger": "GetEnvelopePointByTime", "contents": "reaper.GetEnvelopePointByTime(${1:TrackEnvelope envelope},${2:number time})" },
		{ "trigger": "GetEnvelopeScalingMode", "contents": "reaper.GetEnvelopeScalingMode(${1:TrackEnvelope env})" },
		{ "trigger": "GetEnvelopeStateChunk", "contents": "reaper.GetEnvelopeStateChunk(${1:TrackEnvelope env},${2:string strNeedBig},${3:boolean isundoOptional})" },
		{ "trigger": "GetExePath", "contents": "reaper.GetExePath()" },
		{ "trigger": "GetExtState", "contents": "reaper.GetExtState(${1:string section},${2:string key})" },
		{ "trigger": "GetFocusedFX", "contents": "reaper.GetFocusedFX()" },
		{ "trigger": "GetFreeDiskSpaceForRecordPath", "contents": "reaper.GetFreeDiskSpaceForRecordPath(${1:ReaProject proj},${2:integer pathidx})" },
		{ "trigger": "GetFXEnvelope", "contents": "reaper.GetFXEnvelope(${1:MediaTrack track},${2:integer fxindex},${3:integer parameterindex},${4:boolean create})" },
		{ "trigger": "GetGlobalAutomationOverride", "contents": "reaper.GetGlobalAutomationOverride()" },
		{ "trigger": "GetHZoomLevel", "contents": "reaper.GetHZoomLevel()" },
		{ "trigger": "GetInputChannelName", "contents": "reaper.GetInputChannelName(${1:integer channelIndex})" },
		{ "trigger": "GetInputOutputLatency", "contents": "reaper.GetInputOutputLatency()" },
		{ "trigger": "GetItemEditingTime2", "contents": "reaper.GetItemEditingTime2()" },
		{ "trigger": "GetItemProjectContext", "contents": "reaper.GetItemProjectContext(${1:MediaItem item})" },
		{ "trigger": "GetItemStateChunk", "contents": "reaper.GetItemStateChunk(${1:MediaItem item},${2:string strNeedBig},${3:boolean isundoOptional})" },
		{ "trigger": "GetLastColorThemeFile", "contents": "reaper.GetLastColorThemeFile()" },
		{ "trigger": "GetLastMarkerAndCurRegion", "contents": "reaper.GetLastMarkerAndCurRegion(${1:ReaProject proj},${2:number time})" },
		{ "trigger": "GetLastTouchedFX", "contents": "reaper.GetLastTouchedFX()" },
		{ "trigger": "GetLastTouchedTrack", "contents": "reaper.GetLastTouchedTrack()" },
		{ "trigger": "GetMainHwnd", "contents": "reaper.GetMainHwnd()" },
		{ "trigger": "GetMasterMuteSoloFlags", "contents": "reaper.GetMasterMuteSoloFlags()" },
		{ "trigger": "GetMasterTrack", "contents": "reaper.GetMasterTrack(${1:ReaProject proj})" },
		{ "trigger": "GetMasterTrackVisibility", "contents": "reaper.GetMasterTrackVisibility()" },
		{ "trigger": "GetMaxMidiInputs", "contents": "reaper.GetMaxMidiInputs()" },
		{ "trigger": "GetMaxMidiOutputs", "contents": "reaper.GetMaxMidiOutputs()" },
		{ "trigger": "GetMediaItem", "contents": "reaper.GetMediaItem(${1:ReaProject proj},${2:integer itemidx})" },
		{ "trigger": "GetMediaItem_Track", "contents": "reaper.GetMediaItem_Track(${1:MediaItem item})" },
		{ "trigger": "GetMediaItemInfo_Value", "contents": "reaper.GetMediaItemInfo_Value(${1:MediaItem item},${2:string parmname})" },
		{ "trigger": "GetMediaItemNumTakes", "contents": "reaper.GetMediaItemNumTakes(${1:MediaItem item})" },
		{ "trigger": "GetMediaItemTake", "contents": "reaper.GetMediaItemTake(${1:MediaItem item},${2:integer tk})" },
		{ "trigger": "GetMediaItemTake_Item", "contents": "reaper.GetMediaItemTake_Item(${1:MediaItem_Take take})" },
		{ "trigger": "GetMediaItemTake_Source", "contents": "reaper.GetMediaItemTake_Source(${1:MediaItem_Take take})" },
		{ "trigger": "GetMediaItemTake_Track", "contents": "reaper.GetMediaItemTake_Track(${1:MediaItem_Take take})" },
		{ "trigger": "GetMediaItemTakeByGUID", "contents": "reaper.GetMediaItemTakeByGUID(${1:ReaProject project},${2:string guidGUID})" },
		{ "trigger": "GetMediaItemTakeInfo_Value", "contents": "reaper.GetMediaItemTakeInfo_Value(${1:MediaItem_Take take},${2:string parmname})" },
		{ "trigger": "GetMediaItemTrack", "contents": "reaper.GetMediaItemTrack(${1:MediaItem item})" },
		{ "trigger": "GetMediaSourceFileName", "contents": "reaper.GetMediaSourceFileName(${1:PCM_source source},${2:string filenamebuf})" },
		{ "trigger": "GetMediaSourceLength", "contents": "reaper.GetMediaSourceLength(${1:PCM_source source})" },
		{ "trigger": "GetMediaSourceNumChannels", "contents": "reaper.GetMediaSourceNumChannels(${1:PCM_source source})" },
		{ "trigger": "GetMediaSourceParent", "contents": "reaper.GetMediaSourceParent(${1:PCM_source src})" },
		{ "trigger": "GetMediaSourceSampleRate", "contents": "reaper.GetMediaSourceSampleRate(${1:PCM_source source})" },
		{ "trigger": "GetMediaSourceType", "contents": "reaper.GetMediaSourceType(${1:PCM_source source},${2:string typebuf})" },
		{ "trigger": "GetMediaTrackInfo_Value", "contents": "reaper.GetMediaTrackInfo_Value(${1:MediaTrack tr},${2:string parmname})" },
		{ "trigger": "GetMIDIInputName", "contents": "reaper.GetMIDIInputName(${1:integer dev},${2:string nameout})" },
		{ "trigger": "GetMIDIOutputName", "contents": "reaper.GetMIDIOutputName(${1:integer dev},${2:string nameout})" },
		{ "trigger": "GetMixerScroll", "contents": "reaper.GetMixerScroll()" },
		{ "trigger": "GetMouseModifier", "contents": "reaper.GetMouseModifier(${1:string context},${2:integer modifier_flag},${3:string action})" },
		{ "trigger": "GetMousePosition", "contents": "reaper.GetMousePosition()" },
		{ "trigger": "GetNumAudioInputs", "contents": "reaper.GetNumAudioInputs()" },
		{ "trigger": "GetNumAudioOutputs", "contents": "reaper.GetNumAudioOutputs()" },
		{ "trigger": "GetNumMIDIInputs", "contents": "reaper.GetNumMIDIInputs()" },
		{ "trigger": "GetNumMIDIOutputs", "contents": "reaper.GetNumMIDIOutputs()" },
		{ "trigger": "GetNumTracks", "contents": "reaper.GetNumTracks()" },
		{ "trigger": "GetOS", "contents": "reaper.GetOS()" },
		{ "trigger": "GetOutputChannelName", "contents": "reaper.GetOutputChannelName(${1:integer channelIndex})" },
		{ "trigger": "GetOutputLatency", "contents": "reaper.GetOutputLatency()" },
		{ "trigger": "GetParentTrack", "contents": "reaper.GetParentTrack(${1:MediaTrack track})" },
		{ "trigger": "GetPeakFileName", "contents": "reaper.GetPeakFileName(${1:string fn},${2:string buf})" },
		{ "trigger": "GetPeakFileNameEx", "contents": "reaper.GetPeakFileNameEx(${1:string fn},${2:string buf},${3:boolean forWrite})" },
		{ "trigger": "GetPeakFileNameEx2", "contents": "reaper.GetPeakFileNameEx2(${1:string fn},${2:string buf},${3:boolean forWrite},${4:string peaksfileextension})" },
		{ "trigger": "GetPlayPosition", "contents": "reaper.GetPlayPosition()" },
		{ "trigger": "GetPlayPosition2", "contents": "reaper.GetPlayPosition2()" },
		{ "trigger": "GetPlayPosition2Ex", "contents": "reaper.GetPlayPosition2Ex(${1:ReaProject proj})" },
		{ "trigger": "GetPlayPositionEx", "contents": "reaper.GetPlayPositionEx(${1:ReaProject proj})" },
		{ "trigger": "GetPlayState", "contents": "reaper.GetPlayState()" },
		{ "trigger": "GetPlayStateEx", "contents": "reaper.GetPlayStateEx(${1:ReaProject proj})" },
		{ "trigger": "GetProjectLength", "contents": "reaper.GetProjectLength(${1:ReaProject proj})" },
		{ "trigger": "GetProjectPath", "contents": "reaper.GetProjectPath(${1:string buf})" },
		{ "trigger": "GetProjectPathEx", "contents": "reaper.GetProjectPathEx(${1:ReaProject proj},${2:string buf})" },
		{ "trigger": "GetProjectStateChangeCount", "contents": "reaper.GetProjectStateChangeCount(${1:ReaProject proj})" },
		{ "trigger": "GetProjectTimeOffset", "contents": "reaper.GetProjectTimeOffset(${1:ReaProject proj},${2:boolean rndframe})" },
		{ "trigger": "GetProjectTimeSignature", "contents": "reaper.GetProjectTimeSignature()" },
		{ "trigger": "GetProjectTimeSignature2", "contents": "reaper.GetProjectTimeSignature2(${1:ReaProject proj})" },
		{ "trigger": "GetProjExtState", "contents": "reaper.GetProjExtState(${1:ReaProject proj},${2:string extname},${3:string key})" },
		{ "trigger": "GetResourcePath", "contents": "reaper.GetResourcePath()" },
		{ "trigger": "GetSelectedEnvelope", "contents": "reaper.GetSelectedEnvelope(${1:ReaProject proj})" },
		{ "trigger": "GetSelectedMediaItem", "contents": "reaper.GetSelectedMediaItem(${1:ReaProject proj},${2:integer selitem})" },
		{ "trigger": "GetSelectedTrack", "contents": "reaper.GetSelectedTrack(${1:ReaProject proj},${2:integer seltrackidx})" },
		{ "trigger": "GetSelectedTrack2", "contents": "reaper.GetSelectedTrack2(${1:ReaProject proj},${2:integer seltrackidx},${3:boolean wantmaster})" },
		{ "trigger": "GetSelectedTrackEnvelope", "contents": "reaper.GetSelectedTrackEnvelope(${1:ReaProject proj})" },
		{ "trigger": "GetSet_ArrangeView2", "contents": "reaper.GetSet_ArrangeView2(${1:ReaProject proj},${2:boolean isSet},${3:integer screen_x_start},${4:integer screen_x_end})" },
		{ "trigger": "GetSet_LoopTimeRange", "contents": "reaper.GetSet_LoopTimeRange(${1:boolean isSet},${2:boolean isLoop},${3:number startOut},${4:number endOut},${5:boolean allowautoseek})" },
		{ "trigger": "GetSet_LoopTimeRange2", "contents": "reaper.GetSet_LoopTimeRange2(${1:ReaProject proj},${2:boolean isSet},${3:boolean isLoop},${4:number startOut},${5:number endOut},${6:boolean allowautoseek})" },
		{ "trigger": "GetSetEnvelopeState", "contents": "reaper.GetSetEnvelopeState(${1:TrackEnvelope env},${2:string str})" },
		{ "trigger": "GetSetEnvelopeState2", "contents": "reaper.GetSetEnvelopeState2(${1:TrackEnvelope env},${2:string str},${3:boolean isundo})" },
		{ "trigger": "GetSetItemState", "contents": "reaper.GetSetItemState(${1:MediaItem item},${2:string str})" },
		{ "trigger": "GetSetItemState2", "contents": "reaper.GetSetItemState2(${1:MediaItem item},${2:string str},${3:boolean isundo})" },
		{ "trigger": "GetSetMediaItemTakeInfo_String", "contents": "reaper.GetSetMediaItemTakeInfo_String(${1:MediaItem_Take tk},${2:string parmname},${3:string stringNeedBig},${4:boolean setnewvalue})" },
		{ "trigger": "GetSetMediaTrackInfo_String", "contents": "reaper.GetSetMediaTrackInfo_String(${1:MediaTrack tr},${2:string parmname},${3:string stringNeedBig},${4:boolean setnewvalue})" },
		{ "trigger": "GetSetProjectNotes", "contents": "reaper.GetSetProjectNotes(${1:ReaProject proj},${2:boolean set},${3:string notesNeedBig})" },
		{ "trigger": "GetSetRepeat", "contents": "reaper.GetSetRepeat(${1:integer val})" },
		{ "trigger": "GetSetRepeatEx", "contents": "reaper.GetSetRepeatEx(${1:ReaProject proj},${2:integer val})" },
		{ "trigger": "GetSetTrackState", "contents": "reaper.GetSetTrackState(${1:MediaTrack track},${2:string str})" },
		{ "trigger": "GetSetTrackState2", "contents": "reaper.GetSetTrackState2(${1:MediaTrack track},${2:string str},${3:boolean isundo})" },
		{ "trigger": "GetSubProjectFromSource", "contents": "reaper.GetSubProjectFromSource(${1:PCM_source src})" },
		{ "trigger": "GetTake", "contents": "reaper.GetTake(${1:MediaItem item},${2:integer takeidx})" },
		{ "trigger": "GetTakeEnvelope", "contents": "reaper.GetTakeEnvelope(${1:MediaItem_Take take},${2:integer envidx})" },
		{ "trigger": "GetTakeEnvelopeByName", "contents": "reaper.GetTakeEnvelopeByName(${1:MediaItem_Take take},${2:string envname})" },
		{ "trigger": "GetTakeName", "contents": "reaper.GetTakeName(${1:MediaItem_Take take})" },
		{ "trigger": "GetTakeNumStretchMarkers", "contents": "reaper.GetTakeNumStretchMarkers(${1:MediaItem_Take take})" },
		{ "trigger": "GetTakeStretchMarker", "contents": "reaper.GetTakeStretchMarker(${1:MediaItem_Take take},${2:integer idx})" },
		{ "trigger": "GetTakeStretchMarkerSlope", "contents": "reaper.GetTakeStretchMarkerSlope(${1:MediaItem_Take take},${2:integer idx})" },
		{ "trigger": "GetTCPFXParm", "contents": "reaper.GetTCPFXParm(${1:ReaProject project},${2:MediaTrack track},${3:integer index})" },
		{ "trigger": "GetTempoMatchPlayRate", "contents": "reaper.GetTempoMatchPlayRate(${1:PCM_source source},${2:number srcscale},${3:number position},${4:number mult})" },
		{ "trigger": "GetTempoTimeSigMarker", "contents": "reaper.GetTempoTimeSigMarker(${1:ReaProject proj},${2:integer ptidx})" },
		{ "trigger": "GetToggleCommandState", "contents": "reaper.GetToggleCommandState(${1:integer command_id})" },
		{ "trigger": "GetToggleCommandStateEx", "contents": "reaper.GetToggleCommandStateEx(${1:integer section_id},${2:integer command_id})" },
		{ "trigger": "GetTooltipWindow", "contents": "reaper.GetTooltipWindow()" },
		{ "trigger": "GetTrack", "contents": "reaper.GetTrack(${1:ReaProject proj},${2:integer trackidx})" },
		{ "trigger": "GetTrackAutomationMode", "contents": "reaper.GetTrackAutomationMode(${1:MediaTrack tr})" },
		{ "trigger": "GetTrackColor", "contents": "reaper.GetTrackColor(${1:MediaTrack track})" },
		{ "trigger": "GetTrackDepth", "contents": "reaper.GetTrackDepth(${1:MediaTrack track})" },
		{ "trigger": "GetTrackEnvelope", "contents": "reaper.GetTrackEnvelope(${1:MediaTrack track},${2:integer envidx})" },
		{ "trigger": "GetTrackEnvelopeByChunkName", "contents": "reaper.GetTrackEnvelopeByChunkName(${1:MediaTrack tr},${2:string cfgchunkname})" },
		{ "trigger": "GetTrackEnvelopeByName", "contents": "reaper.GetTrackEnvelopeByName(${1:MediaTrack track},${2:string envname})" },
		{ "trigger": "GetTrackGUID", "contents": "reaper.GetTrackGUID(${1:MediaTrack tr})" },
		{ "trigger": "GetTrackMediaItem", "contents": "reaper.GetTrackMediaItem(${1:MediaTrack tr},${2:integer itemidx})" },
		{ "trigger": "GetTrackMIDINoteName", "contents": "reaper.GetTrackMIDINoteName(${1:integer track},${2:integer note},${3:integer chan})" },
		{ "trigger": "GetTrackMIDINoteNameEx", "contents": "reaper.GetTrackMIDINoteNameEx(${1:ReaProject proj},${2:MediaTrack track},${3:integer note},${4:integer chan})" },
		{ "trigger": "GetTrackMIDINoteRange", "contents": "reaper.GetTrackMIDINoteRange(${1:ReaProject proj},${2:MediaTrack track})" },
		{ "trigger": "GetTrackNumMediaItems", "contents": "reaper.GetTrackNumMediaItems(${1:MediaTrack tr})" },
		{ "trigger": "GetTrackNumSends", "contents": "reaper.GetTrackNumSends(${1:MediaTrack tr},${2:integer category})" },
		{ "trigger": "GetTrackReceiveName", "contents": "reaper.GetTrackReceiveName(${1:MediaTrack track},${2:integer recv_index},${3:string buf})" },
		{ "trigger": "GetTrackReceiveUIMute", "contents": "reaper.GetTrackReceiveUIMute(${1:MediaTrack track},${2:integer recv_index})" },
		{ "trigger": "GetTrackReceiveUIVolPan", "contents": "reaper.GetTrackReceiveUIVolPan(${1:MediaTrack track},${2:integer recv_index})" },
		{ "trigger": "GetTrackSendInfo_Value", "contents": "reaper.GetTrackSendInfo_Value(${1:MediaTrack tr},${2:integer category},${3:integer sendidx},${4:string parmname})" },
		{ "trigger": "GetTrackSendName", "contents": "reaper.GetTrackSendName(${1:MediaTrack track},${2:integer send_index},${3:string buf})" },
		{ "trigger": "GetTrackSendUIMute", "contents": "reaper.GetTrackSendUIMute(${1:MediaTrack track},${2:integer send_index})" },
		{ "trigger": "GetTrackSendUIVolPan", "contents": "reaper.GetTrackSendUIVolPan(${1:MediaTrack track},${2:integer send_index})" },
		{ "trigger": "GetTrackState", "contents": "reaper.GetTrackState(${1:MediaTrack track})" },
		{ "trigger": "GetTrackStateChunk", "contents": "reaper.GetTrackStateChunk(${1:MediaTrack track},${2:string strNeedBig},${3:boolean isundoOptional})" },
		{ "trigger": "GetTrackUIMute", "contents": "reaper.GetTrackUIMute(${1:MediaTrack track})" },
		{ "trigger": "GetTrackUIPan", "contents": "reaper.GetTrackUIPan(${1:MediaTrack track})" },
		{ "trigger": "GetTrackUIVolPan", "contents": "reaper.GetTrackUIVolPan(${1:MediaTrack track})" },
		{ "trigger": "GetUserFileNameForRead", "contents": "reaper.GetUserFileNameForRead(${1:string filenameNeed4096},${2:string title},${3:string defext})" },
		{ "trigger": "GetUserInputs", "contents": "reaper.GetUserInputs(${1:string title},${2:integer num_inputs},${3:string captions_csv},${4:string retvals_csv})" },
		{ "trigger": "GoToMarker", "contents": "reaper.GoToMarker(${1:ReaProject proj},${2:integer marker_index},${3:boolean use_timeline_order})" },
		{ "trigger": "GoToRegion", "contents": "reaper.GoToRegion(${1:ReaProject proj},${2:integer region_index},${3:boolean use_timeline_order})" },
		{ "trigger": "GR_SelectColor", "contents": "reaper.GR_SelectColor(${1:HWND hwnd})" },
		{ "trigger": "GSC_mainwnd", "contents": "reaper.GSC_mainwnd(${1:integer t})" },
		{ "trigger": "guidToString", "contents": "reaper.guidToString(${1:string gGUID},${2:string destNeed64})" },
		{ "trigger": "HasExtState", "contents": "reaper.HasExtState(${1:string section},${2:string key})" },
		{ "trigger": "HasTrackMIDIPrograms", "contents": "reaper.HasTrackMIDIPrograms(${1:integer track})" },
		{ "trigger": "HasTrackMIDIProgramsEx", "contents": "reaper.HasTrackMIDIProgramsEx(${1:ReaProject proj},${2:MediaTrack track})" },
		{ "trigger": "Help_Set", "contents": "reaper.Help_Set(${1:string helpstring},${2:boolean is_temporary_help})" },
		{ "trigger": "HiresPeaksFromSource", "contents": "reaper.HiresPeaksFromSource(${1:PCM_source src},${2:PCM_source_peaktransfer_t block})" },
		{ "trigger": "image_resolve_fn", "contents": "reaper.image_resolve_fn(${1:string in},${2:string out})" },
		{ "trigger": "InsertEnvelopePoint", "contents": "reaper.InsertEnvelopePoint(${1:TrackEnvelope envelope},${2:number time},${3:number value},${4:integer shape},${5:number tension},${6:boolean selected},${7:optional boolean noSortInOptional})" },
		{ "trigger": "InsertMedia", "contents": "reaper.InsertMedia(${1:string file},${2:integer mode})" },
		{ "trigger": "InsertMediaSection", "contents": "reaper.InsertMediaSection(${1:string file},${2:integer mode},${3:number startpct},${4:number endpct},${5:number pitchshift})" },
		{ "trigger": "InsertTrackAtIndex", "contents": "reaper.InsertTrackAtIndex(${1:integer idx},${2:boolean wantDefaults})" },
		{ "trigger": "IsMediaExtension", "contents": "reaper.IsMediaExtension(${1:string ext},${2:boolean wantOthers})" },
		{ "trigger": "IsMediaItemSelected", "contents": "reaper.IsMediaItemSelected(${1:MediaItem item})" },
		{ "trigger": "IsProjectDirty", "contents": "reaper.IsProjectDirty(${1:ReaProject proj})" },
		{ "trigger": "IsTrackSelected", "contents": "reaper.IsTrackSelected(${1:MediaTrack track})" },
		{ "trigger": "IsTrackVisible", "contents": "reaper.IsTrackVisible(${1:MediaTrack track},${2:boolean mixer})" },
		{ "trigger": "LICE_ClipLine", "contents": "reaper.LICE_ClipLine(${1:number pX1Out},${2:number pY1Out},${3:number pX2Out},${4:number pY2Out},${5:integer xLo},${6:integer yLo},${7:integer xHi},${8:integer yHi})" },
		{ "trigger": "Loop_OnArrow", "contents": "reaper.Loop_OnArrow(${1:ReaProject project},${2:integer direction})" },
		{ "trigger": "Main_OnCommand", "contents": "reaper.Main_OnCommand(${1:integer command},${2:integer flag})" },
		{ "trigger": "Main_OnCommandEx", "contents": "reaper.Main_OnCommandEx(${1:integer command},${2:integer flag},${3:ReaProject proj})" },
		{ "trigger": "Main_openProject", "contents": "reaper.Main_openProject(${1:string name})" },
		{ "trigger": "Main_SaveProject", "contents": "reaper.Main_SaveProject(${1:ReaProject proj},${2:boolean forceSaveAsInOptional})" },
		{ "trigger": "Main_UpdateLoopInfo", "contents": "reaper.Main_UpdateLoopInfo(${1:integer ignoremask})" },
		{ "trigger": "MarkProjectDirty", "contents": "reaper.MarkProjectDirty(${1:ReaProject proj})" },
		{ "trigger": "MarkTrackItemsDirty", "contents": "reaper.MarkTrackItemsDirty(${1:MediaTrack track},${2:MediaItem item})" },
		{ "trigger": "Master_GetPlayRate", "contents": "reaper.Master_GetPlayRate(${1:ReaProject project})" },
		{ "trigger": "Master_GetPlayRateAtTime", "contents": "reaper.Master_GetPlayRateAtTime(${1:number time_s},${2:ReaProject proj})" },
		{ "trigger": "Master_GetTempo", "contents": "reaper.Master_GetTempo()" },
		{ "trigger": "Master_NormalizePlayRate", "contents": "reaper.Master_NormalizePlayRate(${1:number playrate},${2:boolean isnormalized})" },
		{ "trigger": "Master_NormalizeTempo", "contents": "reaper.Master_NormalizeTempo(${1:number bpm},${2:boolean isnormalized})" },
		{ "trigger": "MB", "contents": "reaper.MB(${1:string msg},${2:string title},${3:integer type})" },
		{ "trigger": "MediaItemDescendsFromTrack", "contents": "reaper.MediaItemDescendsFromTrack(${1:MediaItem item},${2:MediaTrack track})" },
		{ "trigger": "MIDI_CountEvts", "contents": "reaper.MIDI_CountEvts(${1:MediaItem_Take take})" },
		{ "trigger": "MIDI_DeleteCC", "contents": "reaper.MIDI_DeleteCC(${1:MediaItem_Take take},${2:integer ccidx})" },
		{ "trigger": "MIDI_DeleteEvt", "contents": "reaper.MIDI_DeleteEvt(${1:MediaItem_Take take},${2:integer evtidx})" },
		{ "trigger": "MIDI_DeleteNote", "contents": "reaper.MIDI_DeleteNote(${1:MediaItem_Take take},${2:integer noteidx})" },
		{ "trigger": "MIDI_DeleteTextSysexEvt", "contents": "reaper.MIDI_DeleteTextSysexEvt(${1:MediaItem_Take take},${2:integer textsyxevtidx})" },
		{ "trigger": "MIDI_EnumSelCC", "contents": "reaper.MIDI_EnumSelCC(${1:MediaItem_Take take},${2:integer ccidx})" },
		{ "trigger": "MIDI_EnumSelEvts", "contents": "reaper.MIDI_EnumSelEvts(${1:MediaItem_Take take},${2:integer evtidx})" },
		{ "trigger": "MIDI_EnumSelNotes", "contents": "reaper.MIDI_EnumSelNotes(${1:MediaItem_Take take},${2:integer noteidx})" },
		{ "trigger": "MIDI_EnumSelTextSysexEvts", "contents": "reaper.MIDI_EnumSelTextSysexEvts(${1:MediaItem_Take take},${2:integer textsyxidx})" },
		{ "trigger": "MIDI_GetCC", "contents": "reaper.MIDI_GetCC(${1:MediaItem_Take take},${2:integer ccidx})" },
		{ "trigger": "MIDI_GetEvt", "contents": "reaper.MIDI_GetEvt(${1:MediaItem_Take take},${2:integer evtidx},${3:boolean selectedOut},${4:boolean mutedOut},${5:number ppqposOut},${6:string msg})" },
		{ "trigger": "MIDI_GetGrid", "contents": "reaper.MIDI_GetGrid(${1:MediaItem_Take take})" },
		{ "trigger": "MIDI_GetHash", "contents": "reaper.MIDI_GetHash(${1:MediaItem_Take take},${2:boolean notesonly},${3:string hash})" },
		{ "trigger": "MIDI_GetNote", "contents": "reaper.MIDI_GetNote(${1:MediaItem_Take take},${2:integer noteidx})" },
		{ "trigger": "MIDI_GetPPQPos_EndOfMeasure", "contents": "reaper.MIDI_GetPPQPos_EndOfMeasure(${1:MediaItem_Take take},${2:number ppqpos})" },
		{ "trigger": "MIDI_GetPPQPos_StartOfMeasure", "contents": "reaper.MIDI_GetPPQPos_StartOfMeasure(${1:MediaItem_Take take},${2:number ppqpos})" },
		{ "trigger": "MIDI_GetPPQPosFromProjQN", "contents": "reaper.MIDI_GetPPQPosFromProjQN(${1:MediaItem_Take take},${2:number projqn})" },
		{ "trigger": "MIDI_GetPPQPosFromProjTime", "contents": "reaper.MIDI_GetPPQPosFromProjTime(${1:MediaItem_Take take},${2:number projtime})" },
		{ "trigger": "MIDI_GetProjQNFromPPQPos", "contents": "reaper.MIDI_GetProjQNFromPPQPos(${1:MediaItem_Take take},${2:number ppqpos})" },
		{ "trigger": "MIDI_GetProjTimeFromPPQPos", "contents": "reaper.MIDI_GetProjTimeFromPPQPos(${1:MediaItem_Take take},${2:number ppqpos})" },
		{ "trigger": "MIDI_GetScale", "contents": "reaper.MIDI_GetScale(${1:MediaItem_Take take},${2:number rootOut},${3:number scaleOut},${4:string name})" },
		{ "trigger": "MIDI_GetTextSysexEvt", "contents": "reaper.MIDI_GetTextSysexEvt(${1:MediaItem_Take take},${2:integer textsyxevtidx},${3:optional boolean selectedOutOptional},${4:optional boolean mutedOutOptional},${5:optional number ppqposOutOptional},${6:optional number typeOutOptional},${7:optional string msgOptional})" },
		{ "trigger": "MIDI_GetTrackHash", "contents": "reaper.MIDI_GetTrackHash(${1:MediaTrack track},${2:boolean notesonly},${3:string hash})" },
		{ "trigger": "MIDI_InsertCC", "contents": "reaper.MIDI_InsertCC(${1:MediaItem_Take take},${2:boolean selected},${3:boolean muted},${4:number ppqpos},${5:integer chanmsg},${6:integer chan},${7:integer msg2},${8:integer msg3})" },
		{ "trigger": "MIDI_InsertEvt", "contents": "reaper.MIDI_InsertEvt(${1:MediaItem_Take take},${2:boolean selected},${3:boolean muted},${4:number ppqpos},${5:string bytestr})" },
		{ "trigger": "MIDI_InsertNote", "contents": "reaper.MIDI_InsertNote(${1:MediaItem_Take take},${2:boolean selected},${3:boolean muted},${4:number startppqpos},${5:number endppqpos},${6:integer chan},${7:integer pitch},${8:integer vel},${9:optional boolean noSortInOptional})" },
		{ "trigger": "MIDI_InsertTextSysexEvt", "contents": "reaper.MIDI_InsertTextSysexEvt(${1:MediaItem_Take take},${2:boolean selected},${3:boolean muted},${4:number ppqpos},${5:integer type},${6:string bytestr})" },
		{ "trigger": "midi_reinit", "contents": "reaper.midi_reinit()" },
		{ "trigger": "MIDI_SelectAll", "contents": "reaper.MIDI_SelectAll(${1:MediaItem_Take take},${2:boolean select})" },
		{ "trigger": "MIDI_SetCC", "contents": "reaper.MIDI_SetCC(${1:MediaItem_Take take},${2:integer ccidx},${3:optional boolean selectedInOptional},${4:optional boolean mutedInOptional},${5:optional number ppqposInOptional},${6:optional number chanmsgInOptional},${7:optional number chanInOptional},${8:optional number msg2InOptional},${9:optional number msg3InOptional},${10:optional boolean noSortInOptional})" },
		{ "trigger": "MIDI_SetEvt", "contents": "reaper.MIDI_SetEvt(${1:MediaItem_Take take},${2:integer evtidx},${3:optional boolean selectedInOptional},${4:optional boolean mutedInOptional},${5:optional number ppqposInOptional},${6:optional string msgOptional},${7:optional boolean noSortInOptional})" },
		{ "trigger": "MIDI_SetItemExtents", "contents": "reaper.MIDI_SetItemExtents(${1:MediaItem item},${2:number startQN},${3:number endQN})" },
		{ "trigger": "MIDI_SetNote", "contents": "reaper.MIDI_SetNote(${1:MediaItem_Take take},${2:integer noteidx},${3:optional boolean selectedInOptional},${4:optional boolean mutedInOptional},${5:optional number startppqposInOptional},${6:optional number endppqposInOptional},${7:optional number chanInOptional},${8:optional number pitchInOptional},${9:optional number velInOptional},${10:optional boolean noSortInOptional})" },
		{ "trigger": "MIDI_SetTextSysexEvt", "contents": "reaper.MIDI_SetTextSysexEvt(${1:MediaItem_Take take},${2:integer textsyxevtidx},${3:optional boolean selectedInOptional},${4:optional boolean mutedInOptional},${5:optional number ppqposInOptional},${6:optional number typeInOptional},${7:optional string msgOptional},${8:optional boolean noSortInOptional})" },
		{ "trigger": "MIDI_Sort", "contents": "reaper.MIDI_Sort(${1:MediaItem_Take take})" },
		{ "trigger": "MIDIEditor_GetActive", "contents": "reaper.MIDIEditor_GetActive()" },
		{ "trigger": "MIDIEditor_GetMode", "contents": "reaper.MIDIEditor_GetMode(${1:HWND midieditor})" },
		{ "trigger": "MIDIEditor_GetSetting_int", "contents": "reaper.MIDIEditor_GetSetting_int(${1:HWND midieditor},${2:string setting_desc})" },
		{ "trigger": "MIDIEditor_GetSetting_str", "contents": "reaper.MIDIEditor_GetSetting_str(${1:HWND midieditor},${2:string setting_desc},${3:string buf})" },
		{ "trigger": "MIDIEditor_GetTake", "contents": "reaper.MIDIEditor_GetTake(${1:HWND midieditor})" },
		{ "trigger": "MIDIEditor_LastFocused_OnCommand", "contents": "reaper.MIDIEditor_LastFocused_OnCommand(${1:integer command_id},${2:boolean islistviewcommand})" },
		{ "trigger": "MIDIEditor_OnCommand", "contents": "reaper.MIDIEditor_OnCommand(${1:HWND midieditor},${2:integer command_id})" },
		{ "trigger": "mkpanstr", "contents": "reaper.mkpanstr(${1:string strNeed64},${2:number pan})" },
		{ "trigger": "mkvolpanstr", "contents": "reaper.mkvolpanstr(${1:string strNeed64},${2:number vol},${3:number pan})" },
		{ "trigger": "mkvolstr", "contents": "reaper.mkvolstr(${1:string strNeed64},${2:number vol})" },
		{ "trigger": "MoveEditCursor", "contents": "reaper.MoveEditCursor(${1:number adjamt},${2:boolean dosel})" },
		{ "trigger": "MoveMediaItemToTrack", "contents": "reaper.MoveMediaItemToTrack(${1:MediaItem item},${2:MediaTrack desttr})" },
		{ "trigger": "MuteAllTracks", "contents": "reaper.MuteAllTracks(${1:boolean mute})" },
		{ "trigger": "my_getViewport", "contents": "reaper.my_getViewport(${1:numberr.left},${2:numberr.top},${3:numberr.right},${4:numberr.bot},${5:number sr.left},${6:number sr.top},${7:number sr.right},${8:number sr.bot},${9:boolean wantWorkArea})" },
		{ "trigger": "NamedCommandLookup", "contents": "reaper.NamedCommandLookup(${1:string command_name})" },
		{ "trigger": "OnPauseButton", "contents": "reaper.OnPauseButton()" },
		{ "trigger": "OnPauseButtonEx", "contents": "reaper.OnPauseButtonEx(${1:ReaProject proj})" },
		{ "trigger": "OnPlayButton", "contents": "reaper.OnPlayButton()" },
		{ "trigger": "OnPlayButtonEx", "contents": "reaper.OnPlayButtonEx(${1:ReaProject proj})" },
		{ "trigger": "OnStopButton", "contents": "reaper.OnStopButton()" },
		{ "trigger": "OnStopButtonEx", "contents": "reaper.OnStopButtonEx(${1:ReaProject proj})" },
		{ "trigger": "OpenColorThemeFile", "contents": "reaper.OpenColorThemeFile(${1:string fn})" },
		{ "trigger": "OpenMediaExplorer", "contents": "reaper.OpenMediaExplorer(${1:string mediafn},${2:boolean play})" },
		{ "trigger": "OscLocalMessageToHost", "contents": "reaper.OscLocalMessageToHost(${1:string message},${2:optional number valueInOptional})" },
		{ "trigger": "parse_timestr", "contents": "reaper.parse_timestr(${1:string buf})" },
		{ "trigger": "parse_timestr_len", "contents": "reaper.parse_timestr_len(${1:string buf},${2:number offset},${3:integer modeoverride})" },
		{ "trigger": "parse_timestr_pos", "contents": "reaper.parse_timestr_pos(${1:string buf},${2:integer modeoverride})" },
		{ "trigger": "parsepanstr", "contents": "reaper.parsepanstr(${1:string str})" },
		{ "trigger": "PCM_Sink_Enum", "contents": "reaper.PCM_Sink_Enum(${1:integer idx})" },
		{ "trigger": "PCM_Sink_GetExtension", "contents": "reaper.PCM_Sink_GetExtension(${1:string data})" },
		{ "trigger": "PCM_Sink_ShowConfig", "contents": "reaper.PCM_Sink_ShowConfig(${1:string cfg},${2:HWND hwndParent})" },
		{ "trigger": "PCM_Source_CreateFromFile", "contents": "reaper.PCM_Source_CreateFromFile(${1:string filename})" },
		{ "trigger": "PCM_Source_CreateFromFileEx", "contents": "reaper.PCM_Source_CreateFromFileEx(${1:string filename},${2:boolean forcenoMidiImp})" },
		{ "trigger": "PCM_Source_CreateFromType", "contents": "reaper.PCM_Source_CreateFromType(${1:string sourcetype})" },
		{ "trigger": "PCM_Source_Destroy", "contents": "reaper.PCM_Source_Destroy(${1:PCM_source src})" },
		{ "trigger": "PCM_Source_GetSectionInfo", "contents": "reaper.PCM_Source_GetSectionInfo(${1:PCM_source src})" },
		{ "trigger": "PluginWantsAlwaysRunFx", "contents": "reaper.PluginWantsAlwaysRunFx(${1:integer amt})" },
		{ "trigger": "PreventUIRefresh", "contents": "reaper.PreventUIRefresh(${1:integer prevent_count})" },
		{ "trigger": "ReaScriptError", "contents": "reaper.ReaScriptError(${1:string errmsg})" },
		{ "trigger": "RecursiveCreateDirectory", "contents": "reaper.RecursiveCreateDirectory(${1:string path},${2:integer ignored})" },
		{ "trigger": "RefreshToolbar", "contents": "reaper.RefreshToolbar(${1:integer command_id})" },
		{ "trigger": "RefreshToolbar2", "contents": "reaper.RefreshToolbar2(${1:integer section_id},${2:integer command_id})" },
		{ "trigger": "relative_fn", "contents": "reaper.relative_fn(${1:string in},${2:string out})" },
		{ "trigger": "RemoveTrackSend", "contents": "reaper.RemoveTrackSend(${1:MediaTrack tr},${2:integer category},${3:integer sendidx})" },
		{ "trigger": "RenderFileSection", "contents": "reaper.RenderFileSection(${1:string source_filename},${2:string target_filename},${3:number start_percent},${4:number end_percent},${5:number playrate})" },
		{ "trigger": "Resample_EnumModes", "contents": "reaper.Resample_EnumModes(${1:integer mode})" },
		{ "trigger": "resolve_fn", "contents": "reaper.resolve_fn(${1:string in},${2:string out})" },
		{ "trigger": "resolve_fn2", "contents": "reaper.resolve_fn2(${1:string in},${2:string out},${3:optional string checkSubDirOptional})" },
		{ "trigger": "ReverseNamedCommandLookup", "contents": "reaper.ReverseNamedCommandLookup(${1:integer command_id})" },
		{ "trigger": "ScaleFromEnvelopeMode", "contents": "reaper.ScaleFromEnvelopeMode(${1:integer scaling_mode},${2:number val})" },
		{ "trigger": "ScaleToEnvelopeMode", "contents": "reaper.ScaleToEnvelopeMode(${1:integer scaling_mode},${2:number val})" },
		{ "trigger": "SelectAllMediaItems", "contents": "reaper.SelectAllMediaItems(${1:ReaProject proj},${2:boolean selected})" },
		{ "trigger": "SelectProjectInstance", "contents": "reaper.SelectProjectInstance(${1:ReaProject proj})" },
		{ "trigger": "SetActiveTake", "contents": "reaper.SetActiveTake(${1:MediaItem_Take take})" },
		{ "trigger": "SetAutomationMode", "contents": "reaper.SetAutomationMode(${1:integer mode},${2:boolean onlySel})" },
		{ "trigger": "SetCurrentBPM", "contents": "reaper.SetCurrentBPM(${1:ReaProject __proj},${2:number bpm},${3:boolean wantUndo})" },
		{ "trigger": "SetCursorContext", "contents": "reaper.SetCursorContext(${1:integer mode},${2:TrackEnvelope env})" },
		{ "trigger": "SetEditCurPos", "contents": "reaper.SetEditCurPos(${1:number time},${2:boolean moveview},${3:boolean seekplay})" },
		{ "trigger": "SetEditCurPos2", "contents": "reaper.SetEditCurPos2(${1:ReaProject proj},${2:number time},${3:boolean moveview},${4:boolean seekplay})" },
		{ "trigger": "SetEnvelopePoint", "contents": "reaper.SetEnvelopePoint(${1:TrackEnvelope envelope},${2:integer ptidx},${3:optional number timeInOptional},${4:optional number valueInOptional},${5:optional number shapeInOptional},${6:optional number tensionInOptional},${7:optional boolean selectedInOptional},${8:optional boolean noSortInOptional})" },
		{ "trigger": "SetEnvelopeStateChunk", "contents": "reaper.SetEnvelopeStateChunk(${1:TrackEnvelope env},${2:string str},${3:boolean isundoOptional})" },
		{ "trigger": "SetExtState", "contents": "reaper.SetExtState(${1:string section},${2:string key},${3:string value},${4:boolean persist})" },
		{ "trigger": "SetGlobalAutomationOverride", "contents": "reaper.SetGlobalAutomationOverride(${1:integer mode})" },
		{ "trigger": "SetItemStateChunk", "contents": "reaper.SetItemStateChunk(${1:MediaItem item},${2:string str},${3:boolean isundoOptional})" },
		{ "trigger": "SetMasterTrackVisibility", "contents": "reaper.SetMasterTrackVisibility(${1:integer flag})" },
		{ "trigger": "SetMediaItemInfo_Value", "contents": "reaper.SetMediaItemInfo_Value(${1:MediaItem item},${2:string parmname},${3:number newvalue})" },
		{ "trigger": "SetMediaItemLength", "contents": "reaper.SetMediaItemLength(${1:MediaItem item},${2:number length},${3:boolean refreshUI})" },
		{ "trigger": "SetMediaItemPosition", "contents": "reaper.SetMediaItemPosition(${1:MediaItem item},${2:number position},${3:boolean refreshUI})" },
		{ "trigger": "SetMediaItemSelected", "contents": "reaper.SetMediaItemSelected(${1:MediaItem item},${2:boolean selected})" },
		{ "trigger": "SetMediaItemTake_Source", "contents": "reaper.SetMediaItemTake_Source(${1:MediaItem_Take take},${2:PCM_source source})" },
		{ "trigger": "SetMediaItemTakeInfo_Value", "contents": "reaper.SetMediaItemTakeInfo_Value(${1:MediaItem_Take take},${2:string parmname},${3:number newvalue})" },
		{ "trigger": "SetMediaTrackInfo_Value", "contents": "reaper.SetMediaTrackInfo_Value(${1:MediaTrack tr},${2:string parmname},${3:number newvalue})" },
		{ "trigger": "SetMIDIEditorGrid", "contents": "reaper.SetMIDIEditorGrid(${1:ReaProject project},${2:number division})" },
		{ "trigger": "SetMixerScroll", "contents": "reaper.SetMixerScroll(${1:MediaTrack leftmosttrack})" },
		{ "trigger": "SetMouseModifier", "contents": "reaper.SetMouseModifier(${1:string context},${2:integer modifier_flag},${3:string action})" },
		{ "trigger": "SetOnlyTrackSelected", "contents": "reaper.SetOnlyTrackSelected(${1:MediaTrack track})" },
		{ "trigger": "SetProjectGrid", "contents": "reaper.SetProjectGrid(${1:ReaProject project},${2:number division})" },
		{ "trigger": "SetProjectMarker", "contents": "reaper.SetProjectMarker(${1:integer markrgnindexnumber},${2:boolean isrgn},${3:number pos},${4:number rgnend},${5:string name})" },
		{ "trigger": "SetProjectMarker2", "contents": "reaper.SetProjectMarker2(${1:ReaProject proj},${2:integer markrgnindexnumber},${3:boolean isrgn},${4:number pos},${5:number rgnend},${6:string name})" },
		{ "trigger": "SetProjectMarker3", "contents": "reaper.SetProjectMarker3(${1:ReaProject proj},${2:integer markrgnindexnumber},${3:boolean isrgn},${4:number pos},${5:number rgnend},${6:string name},${7:integer color})" },
		{ "trigger": "SetProjectMarker4", "contents": "reaper.SetProjectMarker4(${1:ReaProject proj},${2:integer markrgnindexnumber},${3:boolean isrgn},${4:number pos},${5:number rgnend},${6:string name},${7:integer color},${8:integer flags})" },
		{ "trigger": "SetProjectMarkerByIndex", "contents": "reaper.SetProjectMarkerByIndex(${1:ReaProject proj},${2:integer markrgnidx},${3:boolean isrgn},${4:number pos},${5:number rgnend},${6:integer IDnumber},${7:string name},${8:integer color})" },
		{ "trigger": "SetProjectMarkerByIndex2", "contents": "reaper.SetProjectMarkerByIndex2(${1:ReaProject proj},${2:integer markrgnidx},${3:boolean isrgn},${4:number pos},${5:number rgnend},${6:integer IDnumber},${7:string name},${8:integer color},${9:integer flags})" },
		{ "trigger": "SetProjExtState", "contents": "reaper.SetProjExtState(${1:ReaProject proj},${2:string extname},${3:string key},${4:string value})" },
		{ "trigger": "SetRegionRenderMatrix", "contents": "reaper.SetRegionRenderMatrix(${1:ReaProject proj},${2:integer regionindex},${3:MediaTrack track},${4:integer addorremove})" },
		{ "trigger": "SetTakeStretchMarker", "contents": "reaper.SetTakeStretchMarker(${1:MediaItem_Take take},${2:integer idx},${3:number pos},${4:optional number srcposInOptional})" },
		{ "trigger": "SetTakeStretchMarkerSlope", "contents": "reaper.SetTakeStretchMarkerSlope(${1:MediaItem_Take take},${2:integer idx},${3:number slope})" },
		{ "trigger": "SetTempoTimeSigMarker", "contents": "reaper.SetTempoTimeSigMarker(${1:ReaProject proj},${2:integer ptidx},${3:number timepos},${4:integer measurepos},${5:number beatpos},${6:number bpm},${7:integer timesig_num},${8:integer timesig_denom},${9:boolean lineartempo})" },
		{ "trigger": "SetToggleCommandState", "contents": "reaper.SetToggleCommandState(${1:integer section_id},${2:integer command_id},${3:integer state})" },
		{ "trigger": "SetTrackAutomationMode", "contents": "reaper.SetTrackAutomationMode(${1:MediaTrack tr},${2:integer mode})" },
		{ "trigger": "SetTrackColor", "contents": "reaper.SetTrackColor(${1:MediaTrack track},${2:integer color})" },
		{ "trigger": "SetTrackMIDINoteName", "contents": "reaper.SetTrackMIDINoteName(${1:integer track},${2:integer note},${3:integer chan},${4:string name})" },
		{ "trigger": "SetTrackMIDINoteNameEx", "contents": "reaper.SetTrackMIDINoteNameEx(${1:ReaProject proj},${2:MediaTrack track},${3:integer note},${4:integer chan},${5:string name})" },
		{ "trigger": "SetTrackSelected", "contents": "reaper.SetTrackSelected(${1:MediaTrack track},${2:boolean selected})" },
		{ "trigger": "SetTrackSendInfo_Value", "contents": "reaper.SetTrackSendInfo_Value(${1:MediaTrack tr},${2:integer category},${3:integer sendidx},${4:string parmname},${5:number newvalue})" },
		{ "trigger": "SetTrackSendUIPan", "contents": "reaper.SetTrackSendUIPan(${1:MediaTrack track},${2:integer send_idx},${3:number pan},${4:integer isend})" },
		{ "trigger": "SetTrackSendUIVol", "contents": "reaper.SetTrackSendUIVol(${1:MediaTrack track},${2:integer send_idx},${3:number vol},${4:integer isend})" },
		{ "trigger": "SetTrackStateChunk", "contents": "reaper.SetTrackStateChunk(${1:MediaTrack track},${2:string str},${3:boolean isundoOptional})" },
		{ "trigger": "ShowActionList", "contents": "reaper.ShowActionList(${1:KbdSectionInfo caller},${2:HWND callerWnd})" },
		{ "trigger": "ShowConsoleMsg", "contents": "reaper.ShowConsoleMsg(${1:string msg})" },
		{ "trigger": "ShowMessageBox", "contents": "reaper.ShowMessageBox(${1:string msg},${2:string title},${3:integer type})" },
		{ "trigger": "SLIDER2DB", "contents": "reaper.SLIDER2DB(${1:number y})" },
		{ "trigger": "SnapToGrid", "contents": "reaper.SnapToGrid(${1:ReaProject project},${2:number time_pos})" },
		{ "trigger": "SoloAllTracks", "contents": "reaper.SoloAllTracks(${1:integer solo})" },
		{ "trigger": "Splash_GetWnd", "contents": "reaper.Splash_GetWnd()" },
		{ "trigger": "SplitMediaItem", "contents": "reaper.SplitMediaItem(${1:MediaItem item},${2:number position})" },
		{ "trigger": "stringToGuid", "contents": "reaper.stringToGuid(${1:string str},${2:string gGUID})" },
		{ "trigger": "StuffMIDIMessage", "contents": "reaper.StuffMIDIMessage(${1:integer mode},${2:integer msg1},${3:integer msg2},${4:integer msg3})" },
		{ "trigger": "TakeFX_AddByName", "contents": "reaper.TakeFX_AddByName(${1:MediaItem_Take take},${2:string fxname},${3:integer instantiate})" },
		{ "trigger": "TakeFX_EndParamEdit", "contents": "reaper.TakeFX_EndParamEdit(${1:MediaItem_Take take},${2:integer fx},${3:integer param})" },
		{ "trigger": "TakeFX_FormatParamValue", "contents": "reaper.TakeFX_FormatParamValue(${1:MediaItem_Take take},${2:integer fx},${3:integer param},${4:number val},${5:string buf})" },
		{ "trigger": "TakeFX_FormatParamValueNormalized", "contents": "reaper.TakeFX_FormatParamValueNormalized(${1:MediaItem_Take take},${2:integer fx},${3:integer param},${4:number value},${5:string buf})" },
		{ "trigger": "TakeFX_GetChainVisible", "contents": "reaper.TakeFX_GetChainVisible(${1:MediaItem_Take take})" },
		{ "trigger": "TakeFX_GetCount", "contents": "reaper.TakeFX_GetCount(${1:MediaItem_Take take})" },
		{ "trigger": "TakeFX_GetEnabled", "contents": "reaper.TakeFX_GetEnabled(${1:MediaItem_Take take},${2:integer fx})" },
		{ "trigger": "TakeFX_GetEnvelope", "contents": "reaper.TakeFX_GetEnvelope(${1:MediaItem_Take take},${2:integer fxindex},${3:integer parameterindex},${4:boolean create})" },
		{ "trigger": "TakeFX_GetFloatingWindow", "contents": "reaper.TakeFX_GetFloatingWindow(${1:MediaItem_Take take},${2:integer index})" },
		{ "trigger": "TakeFX_GetFormattedParamValue", "contents": "reaper.TakeFX_GetFormattedParamValue(${1:MediaItem_Take take},${2:integer fx},${3:integer param},${4:string buf})" },
		{ "trigger": "TakeFX_GetFXGUID", "contents": "reaper.TakeFX_GetFXGUID(${1:MediaItem_Take take},${2:integer fx})" },
		{ "trigger": "TakeFX_GetFXName", "contents": "reaper.TakeFX_GetFXName(${1:MediaItem_Take take},${2:integer fx},${3:string buf})" },
		{ "trigger": "TakeFX_GetIOSize", "contents": "reaper.TakeFX_GetIOSize(${1:MediaItem_Take take},${2:integer fx})" },
		{ "trigger": "TakeFX_GetNumParams", "contents": "reaper.TakeFX_GetNumParams(${1:MediaItem_Take take},${2:integer fx})" },
		{ "trigger": "TakeFX_GetOpen", "contents": "reaper.TakeFX_GetOpen(${1:MediaItem_Take take},${2:integer fx})" },
		{ "trigger": "TakeFX_GetParam", "contents": "reaper.TakeFX_GetParam(${1:MediaItem_Take take},${2:integer fx},${3:integer param})" },
		{ "trigger": "TakeFX_GetParameterStepSizes", "contents": "reaper.TakeFX_GetParameterStepSizes(${1:MediaItem_Take take},${2:integer fx},${3:integer param})" },
		{ "trigger": "TakeFX_GetParamEx", "contents": "reaper.TakeFX_GetParamEx(${1:MediaItem_Take take},${2:integer fx},${3:integer param})" },
		{ "trigger": "TakeFX_GetParamName", "contents": "reaper.TakeFX_GetParamName(${1:MediaItem_Take take},${2:integer fx},${3:integer param},${4:string buf})" },
		{ "trigger": "TakeFX_GetParamNormalized", "contents": "reaper.TakeFX_GetParamNormalized(${1:MediaItem_Take take},${2:integer fx},${3:integer param})" },
		{ "trigger": "TakeFX_GetPinMappings", "contents": "reaper.TakeFX_GetPinMappings(${1:MediaItem_Take tr},${2:integer fx},${3:integer isOutput},${4:integer pin})" },
		{ "trigger": "TakeFX_GetPreset", "contents": "reaper.TakeFX_GetPreset(${1:MediaItem_Take take},${2:integer fx},${3:string presetname})" },
		{ "trigger": "TakeFX_GetPresetIndex", "contents": "reaper.TakeFX_GetPresetIndex(${1:MediaItem_Take take},${2:integer fx})" },
		{ "trigger": "TakeFX_GetUserPresetFilename", "contents": "reaper.TakeFX_GetUserPresetFilename(${1:MediaItem_Take take},${2:integer fx},${3:string fn})" },
		{ "trigger": "TakeFX_NavigatePresets", "contents": "reaper.TakeFX_NavigatePresets(${1:MediaItem_Take take},${2:integer fx},${3:integer presetmove})" },
		{ "trigger": "TakeFX_SetEnabled", "contents": "reaper.TakeFX_SetEnabled(${1:MediaItem_Take take},${2:integer fx},${3:boolean enabled})" },
		{ "trigger": "TakeFX_SetOpen", "contents": "reaper.TakeFX_SetOpen(${1:MediaItem_Take take},${2:integer fx},${3:boolean open})" },
		{ "trigger": "TakeFX_SetParam", "contents": "reaper.TakeFX_SetParam(${1:MediaItem_Take take},${2:integer fx},${3:integer param},${4:number val})" },
		{ "trigger": "TakeFX_SetParamNormalized", "contents": "reaper.TakeFX_SetParamNormalized(${1:MediaItem_Take take},${2:integer fx},${3:integer param},${4:number value})" },
		{ "trigger": "TakeFX_SetPinMappings", "contents": "reaper.TakeFX_SetPinMappings(${1:MediaItem_Take tr},${2:integer fx},${3:integer isOutput},${4:integer pin},${5:integer low32bits},${6:integer hi32bits})" },
		{ "trigger": "TakeFX_SetPreset", "contents": "reaper.TakeFX_SetPreset(${1:MediaItem_Take take},${2:integer fx},${3:string presetname})" },
		{ "trigger": "TakeFX_SetPresetByIndex", "contents": "reaper.TakeFX_SetPresetByIndex(${1:MediaItem_Take take},${2:integer fx},${3:integer idx})" },
		{ "trigger": "TakeFX_Show", "contents": "reaper.TakeFX_Show(${1:MediaItem_Take take},${2:integer index},${3:integer showFlag})" },
		{ "trigger": "TakeIsMIDI", "contents": "reaper.TakeIsMIDI(${1:MediaItem_Take take})" },
		{ "trigger": "time_precise", "contents": "reaper.time_precise()" },
		{ "trigger": "TimeMap2_beatsToTime", "contents": "reaper.TimeMap2_beatsToTime(${1:ReaProject proj},${2:number tpos},${3:optional number measuresInOptional})" },
		{ "trigger": "TimeMap2_GetDividedBpmAtTime", "contents": "reaper.TimeMap2_GetDividedBpmAtTime(${1:ReaProject proj},${2:number time})" },
		{ "trigger": "TimeMap2_GetNextChangeTime", "contents": "reaper.TimeMap2_GetNextChangeTime(${1:ReaProject proj},${2:number time})" },
		{ "trigger": "TimeMap2_QNToTime", "contents": "reaper.TimeMap2_QNToTime(${1:ReaProject proj},${2:number qn})" },
		{ "trigger": "TimeMap2_timeToBeats", "contents": "reaper.TimeMap2_timeToBeats(${1:ReaProject proj},${2:number tpos})" },
		{ "trigger": "TimeMap2_timeToQN", "contents": "reaper.TimeMap2_timeToQN(${1:ReaProject proj},${2:number tpos})" },
		{ "trigger": "TimeMap_curFrameRate", "contents": "reaper.TimeMap_curFrameRate(${1:ReaProject proj})" },
		{ "trigger": "TimeMap_GetDividedBpmAtTime", "contents": "reaper.TimeMap_GetDividedBpmAtTime(${1:number time})" },
		{ "trigger": "TimeMap_GetMeasureInfo", "contents": "reaper.TimeMap_GetMeasureInfo(${1:ReaProject proj},${2:integer measure})" },
		{ "trigger": "TimeMap_GetMetronomePattern", "contents": "reaper.TimeMap_GetMetronomePattern(${1:ReaProject proj},${2:number time},${3:string pattern})" },
		{ "trigger": "TimeMap_GetTimeSigAtTime", "contents": "reaper.TimeMap_GetTimeSigAtTime(${1:ReaProject proj},${2:number time})" },
		{ "trigger": "TimeMap_QNToMeasures", "contents": "reaper.TimeMap_QNToMeasures(${1:ReaProject proj},${2:number qn})" },
		{ "trigger": "TimeMap_QNToTime", "contents": "reaper.TimeMap_QNToTime(${1:number qn})" },
		{ "trigger": "TimeMap_QNToTime_abs", "contents": "reaper.TimeMap_QNToTime_abs(${1:ReaProject proj},${2:number qn})" },
		{ "trigger": "TimeMap_timeToQN", "contents": "reaper.TimeMap_timeToQN(${1:number tpos})" },
		{ "trigger": "TimeMap_timeToQN_abs", "contents": "reaper.TimeMap_timeToQN_abs(${1:ReaProject proj},${2:number tpos})" },
		{ "trigger": "ToggleTrackSendUIMute", "contents": "reaper.ToggleTrackSendUIMute(${1:MediaTrack track},${2:integer send_idx})" },
		{ "trigger": "Track_GetPeakHoldDB", "contents": "reaper.Track_GetPeakHoldDB(${1:MediaTrack track},${2:integer channel},${3:boolean clear})" },
		{ "trigger": "Track_GetPeakInfo", "contents": "reaper.Track_GetPeakInfo(${1:MediaTrack track},${2:integer channel})" },
		{ "trigger": "TrackCtl_SetToolTip", "contents": "reaper.TrackCtl_SetToolTip(${1:string fmt},${2:integer xpos},${3:integer ypos},${4:boolean topmost})" },
		{ "trigger": "TrackFX_AddByName", "contents": "reaper.TrackFX_AddByName(${1:MediaTrack track},${2:string fxname},${3:boolean recFX},${4:integer instantiate})" },
		{ "trigger": "TrackFX_EndParamEdit", "contents": "reaper.TrackFX_EndParamEdit(${1:MediaTrack track},${2:integer fx},${3:integer param})" },
		{ "trigger": "TrackFX_FormatParamValue", "contents": "reaper.TrackFX_FormatParamValue(${1:MediaTrack track},${2:integer fx},${3:integer param},${4:number val},${5:string buf})" },
		{ "trigger": "TrackFX_FormatParamValueNormalized", "contents": "reaper.TrackFX_FormatParamValueNormalized(${1:MediaTrack track},${2:integer fx},${3:integer param},${4:number value},${5:string buf})" },
		{ "trigger": "TrackFX_GetByName", "contents": "reaper.TrackFX_GetByName(${1:MediaTrack track},${2:string fxname},${3:boolean instantiate})" },
		{ "trigger": "TrackFX_GetChainVisible", "contents": "reaper.TrackFX_GetChainVisible(${1:MediaTrack track})" },
		{ "trigger": "TrackFX_GetCount", "contents": "reaper.TrackFX_GetCount(${1:MediaTrack track})" },
		{ "trigger": "TrackFX_GetEnabled", "contents": "reaper.TrackFX_GetEnabled(${1:MediaTrack track},${2:integer fx})" },
		{ "trigger": "TrackFX_GetEQ", "contents": "reaper.TrackFX_GetEQ(${1:MediaTrack track},${2:boolean instantiate})" },
		{ "trigger": "TrackFX_GetEQBandEnabled", "contents": "reaper.TrackFX_GetEQBandEnabled(${1:MediaTrack track},${2:integer fxidx},${3:integer bandtype},${4:integer bandidx})" },
		{ "trigger": "TrackFX_GetEQParam", "contents": "reaper.TrackFX_GetEQParam(${1:MediaTrack track},${2:integer fxidx},${3:integer paramidx})" },
		{ "trigger": "TrackFX_GetFloatingWindow", "contents": "reaper.TrackFX_GetFloatingWindow(${1:MediaTrack track},${2:integer index})" },
		{ "trigger": "TrackFX_GetFormattedParamValue", "contents": "reaper.TrackFX_GetFormattedParamValue(${1:MediaTrack track},${2:integer fx},${3:integer param},${4:string buf})" },
		{ "trigger": "TrackFX_GetFXGUID", "contents": "reaper.TrackFX_GetFXGUID(${1:MediaTrack track},${2:integer fx})" },
		{ "trigger": "TrackFX_GetFXName", "contents": "reaper.TrackFX_GetFXName(${1:MediaTrack track},${2:integer fx},${3:string buf})" },
		{ "trigger": "TrackFX_GetInstrument", "contents": "reaper.TrackFX_GetInstrument(${1:MediaTrack track})" },
		{ "trigger": "TrackFX_GetIOSize", "contents": "reaper.TrackFX_GetIOSize(${1:MediaTrack track},${2:integer fx})" },
		{ "trigger": "TrackFX_GetNumParams", "contents": "reaper.TrackFX_GetNumParams(${1:MediaTrack track},${2:integer fx})" },
		{ "trigger": "TrackFX_GetOpen", "contents": "reaper.TrackFX_GetOpen(${1:MediaTrack track},${2:integer fx})" },
		{ "trigger": "TrackFX_GetParam", "contents": "reaper.TrackFX_GetParam(${1:MediaTrack track},${2:integer fx},${3:integer param})" },
		{ "trigger": "TrackFX_GetParameterStepSizes", "contents": "reaper.TrackFX_GetParameterStepSizes(${1:MediaTrack track},${2:integer fx},${3:integer param})" },
		{ "trigger": "TrackFX_GetParamEx", "contents": "reaper.TrackFX_GetParamEx(${1:MediaTrack track},${2:integer fx},${3:integer param})" },
		{ "trigger": "TrackFX_GetParamName", "contents": "reaper.TrackFX_GetParamName(${1:MediaTrack track},${2:integer fx},${3:integer param},${4:string buf})" },
		{ "trigger": "TrackFX_GetParamNormalized", "contents": "reaper.TrackFX_GetParamNormalized(${1:MediaTrack track},${2:integer fx},${3:integer param})" },
		{ "trigger": "TrackFX_GetPinMappings", "contents": "reaper.TrackFX_GetPinMappings(${1:MediaTrack tr},${2:integer fx},${3:integer isOutput},${4:integer pin})" },
		{ "trigger": "TrackFX_GetPreset", "contents": "reaper.TrackFX_GetPreset(${1:MediaTrack track},${2:integer fx},${3:string presetname})" },
		{ "trigger": "TrackFX_GetPresetIndex", "contents": "reaper.TrackFX_GetPresetIndex(${1:MediaTrack track},${2:integer fx})" },
		{ "trigger": "TrackFX_GetRecChainVisible", "contents": "reaper.TrackFX_GetRecChainVisible(${1:MediaTrack track})" },
		{ "trigger": "TrackFX_GetRecCount", "contents": "reaper.TrackFX_GetRecCount(${1:MediaTrack track})" },
		{ "trigger": "TrackFX_GetUserPresetFilename", "contents": "reaper.TrackFX_GetUserPresetFilename(${1:MediaTrack track},${2:integer fx},${3:string fn})" },
		{ "trigger": "TrackFX_NavigatePresets", "contents": "reaper.TrackFX_NavigatePresets(${1:MediaTrack track},${2:integer fx},${3:integer presetmove})" },
		{ "trigger": "TrackFX_SetEnabled", "contents": "reaper.TrackFX_SetEnabled(${1:MediaTrack track},${2:integer fx},${3:boolean enabled})" },
		{ "trigger": "TrackFX_SetEQBandEnabled", "contents": "reaper.TrackFX_SetEQBandEnabled(${1:MediaTrack track},${2:integer fxidx},${3:integer bandtype},${4:integer bandidx},${5:boolean enable})" },
		{ "trigger": "TrackFX_SetEQParam", "contents": "reaper.TrackFX_SetEQParam(${1:MediaTrack track},${2:integer fxidx},${3:integer bandtype},${4:integer bandidx},${5:integer paramtype},${6:number val},${7:boolean isnorm})" },
		{ "trigger": "TrackFX_SetOpen", "contents": "reaper.TrackFX_SetOpen(${1:MediaTrack track},${2:integer fx},${3:boolean open})" },
		{ "trigger": "TrackFX_SetParam", "contents": "reaper.TrackFX_SetParam(${1:MediaTrack track},${2:integer fx},${3:integer param},${4:number val})" },
		{ "trigger": "TrackFX_SetParamNormalized", "contents": "reaper.TrackFX_SetParamNormalized(${1:MediaTrack track},${2:integer fx},${3:integer param},${4:number value})" },
		{ "trigger": "TrackFX_SetPinMappings", "contents": "reaper.TrackFX_SetPinMappings(${1:MediaTrack tr},${2:integer fx},${3:integer isOutput},${4:integer pin},${5:integer low32bits},${6:integer hi32bits})" },
		{ "trigger": "TrackFX_SetPreset", "contents": "reaper.TrackFX_SetPreset(${1:MediaTrack track},${2:integer fx},${3:string presetname})" },
		{ "trigger": "TrackFX_SetPresetByIndex", "contents": "reaper.TrackFX_SetPresetByIndex(${1:MediaTrack track},${2:integer fx},${3:integer idx})" },
		{ "trigger": "TrackFX_Show", "contents": "reaper.TrackFX_Show(${1:MediaTrack track},${2:integer index},${3:integer showFlag})" },
		{ "trigger": "TrackList_AdjustWindows", "contents": "reaper.TrackList_AdjustWindows(${1:boolean isMinor})" },
		{ "trigger": "TrackList_UpdateAllExternalSurfaces", "contents": "reaper.TrackList_UpdateAllExternalSurfaces()" },
		{ "trigger": "Undo_BeginBlock", "contents": "reaper.Undo_BeginBlock()" },
		{ "trigger": "Undo_BeginBlock2", "contents": "reaper.Undo_BeginBlock2(${1:ReaProject proj})" },
		{ "trigger": "Undo_CanRedo2", "contents": "reaper.Undo_CanRedo2(${1:ReaProject proj})" },
		{ "trigger": "Undo_CanUndo2", "contents": "reaper.Undo_CanUndo2(${1:ReaProject proj})" },
		{ "trigger": "Undo_DoRedo2", "contents": "reaper.Undo_DoRedo2(${1:ReaProject proj})" },
		{ "trigger": "Undo_DoUndo2", "contents": "reaper.Undo_DoUndo2(${1:ReaProject proj})" },
		{ "trigger": "Undo_EndBlock", "contents": "reaper.Undo_EndBlock(${1:string descchange},${2:integer extraflags})" },
		{ "trigger": "Undo_EndBlock2", "contents": "reaper.Undo_EndBlock2(${1:ReaProject proj},${2:string descchange},${3:integer extraflags})" },
		{ "trigger": "Undo_OnStateChange", "contents": "reaper.Undo_OnStateChange(${1:string descchange})" },
		{ "trigger": "Undo_OnStateChange2", "contents": "reaper.Undo_OnStateChange2(${1:ReaProject proj},${2:string descchange})" },
		{ "trigger": "Undo_OnStateChange_Item", "contents": "reaper.Undo_OnStateChange_Item(${1:ReaProject proj},${2:string name},${3:MediaItem item})" },
		{ "trigger": "Undo_OnStateChangeEx", "contents": "reaper.Undo_OnStateChangeEx(${1:string descchange},${2:integer whichStates},${3:integer trackparm})" },
		{ "trigger": "Undo_OnStateChangeEx2", "contents": "reaper.Undo_OnStateChangeEx2(${1:ReaProject proj},${2:string descchange},${3:integer whichStates},${4:integer trackparm})" },
		{ "trigger": "UpdateArrange", "contents": "reaper.UpdateArrange()" },
		{ "trigger": "UpdateItemInProject", "contents": "reaper.UpdateItemInProject(${1:MediaItem item})" },
		{ "trigger": "UpdateTimeline", "contents": "reaper.UpdateTimeline()" },
		{ "trigger": "ValidatePtr", "contents": "reaper.ValidatePtr(${1:identifier pointer},${2:string ctypename})" },
		{ "trigger": "ValidatePtr2", "contents": "reaper.ValidatePtr2(${1:ReaProject proj},${2:identifier pointer},${3:string ctypename})" },
		{ "trigger": "ViewPrefs", "contents": "reaper.ViewPrefs(${1:integer page},${2:string pageByName})" },
		{ "trigger": "SNM_CreateFastString", "contents": "reaper.SNM_CreateFastString(${1:string str})" },
		{ "trigger": "SNM_DeleteFastString", "contents": "reaper.SNM_DeleteFastString(${1:WDL_FastString str})" },
		{ "trigger": "SNM_GetFastString", "contents": "reaper.SNM_GetFastString(${1:WDL_FastString str})" },
		{ "trigger": "SNM_GetFastStringLength", "contents": "reaper.SNM_GetFastStringLength(${1:WDL_FastString str})" },
		{ "trigger": "SNM_SetFastString", "contents": "reaper.SNM_SetFastString(${1:WDL_FastString str},${2:string newstr})" },
		{ "trigger": "SNM_GetMediaItemTakeByGUID", "contents": "reaper.SNM_GetMediaItemTakeByGUID(${1:ReaProject project},${2:string guid})" },
		{ "trigger": "SNM_GetSourceType", "contents": "reaper.SNM_GetSourceType(${1:MediaItem_Take takeWDL_FastString type})" },
		{ "trigger": "SNM_GetSetSourceState", "contents": "reaper.SNM_GetSetSourceState(${1:MediaItem item},${2:integer takeidxWDL_FastString state},${3:boolean setnewvalue})" },
		{ "trigger": "SNM_GetSetSourceState2", "contents": "reaper.SNM_GetSetSourceState2(${1:MediaItem_Take takeWDL_FastString state},${2:boolean setnewvalue})" },
		{ "trigger": "SNM_GetSetObjectState", "contents": "reaper.SNM_GetSetObjectState(${1:identifier objWDL_FastString state},${2:boolean setnewvalue},${3:boolean wantminimalstate})" },
		{ "trigger": "SNM_AddReceive", "contents": "reaper.SNM_AddReceive(${1:MediaTrack src},${2:MediaTrack dest},${3:integer type})" },
		{ "trigger": "SNM_RemoveReceive", "contents": "reaper.SNM_RemoveReceive(${1:MediaTrack tr},${2:integer rcvidx})" },
		{ "trigger": "SNM_RemoveReceivesFrom", "contents": "reaper.SNM_RemoveReceivesFrom(${1:MediaTrack tr},${2:MediaTrack srctr})" },
		{ "trigger": "SNM_GetIntConfigVar", "contents": "reaper.SNM_GetIntConfigVar(${1:string varname},${2:integer errvalue})" },
		{ "trigger": "SNM_SetIntConfigVar", "contents": "reaper.SNM_SetIntConfigVar(${1:string varname},${2:integer newvalue})" },
		{ "trigger": "SNM_GetDoubleConfigVar", "contents": "reaper.SNM_GetDoubleConfigVar(${1:string varname},${2:number errvalue})" },
		{ "trigger": "SNM_SetDoubleConfigVar", "contents": "reaper.SNM_SetDoubleConfigVar(${1:string varname},${2:number newvalue})" },
		{ "trigger": "SNM_MoveOrRemoveTrackFX", "contents": "reaper.SNM_MoveOrRemoveTrackFX(${1:MediaTrack tr},${2:integer fxId},${3:integer what})" },
		{ "trigger": "SNM_GetProjectMarkerName", "contents": "reaper.SNM_GetProjectMarkerName(${1:ReaProject proj},${2:integer num},${3:boolean isrgnWDL_FastString name})" },
		{ "trigger": "SNM_SetProjectMarker", "contents": "reaper.SNM_SetProjectMarker(${1:ReaProject proj},${2:integer num},${3:boolean isrgn},${4:number pos},${5:number rgnend},${6:string name},${7:integer color})" },
		{ "trigger": "SNM_SelectResourceBookmark", "contents": "reaper.SNM_SelectResourceBookmark(${1:string name})" },
		{ "trigger": "SNM_TieResourceSlotActions", "contents": "reaper.SNM_TieResourceSlotActions(${1:integer bookmarkId})" },
		{ "trigger": "SNM_AddTCPFXParm", "contents": "reaper.SNM_AddTCPFXParm(${1:MediaTrack tr},${2:integer fxId},${3:integer prmId})" },
		{ "trigger": "SNM_TagMediaFile", "contents": "reaper.SNM_TagMediaFile(${1:string fn},${2:string tag},${3:string tagval})" },
		{ "trigger": "SNM_ReadMediaFileTag", "contents": "reaper.SNM_ReadMediaFileTag(${1:string fn},${2:string tag},${3:string tagval})" },
		{ "trigger": "FNG_AllocMidiTake", "contents": "reaper.FNG_AllocMidiTake(${1:MediaItem_Take take})" },
		{ "trigger": "FNG_FreeMidiTake", "contents": "reaper.FNG_FreeMidiTake(${1:RprMidiTake midiTake})" },
		{ "trigger": "FNG_CountMidiNotes", "contents": "reaper.FNG_CountMidiNotes(${1:RprMidiTake midiTake})" },
		{ "trigger": "FNG_GetMidiNote", "contents": "reaper.FNG_GetMidiNote(${1:RprMidiTake midiTake},${2:integer index})" },
		{ "trigger": "FNG_GetMidiNoteIntProperty", "contents": "reaper.FNG_GetMidiNoteIntProperty(${1:RprMidiNote midiNote},${2:string property})" },
		{ "trigger": "FNG_SetMidiNoteIntProperty", "contents": "reaper.FNG_SetMidiNoteIntProperty(${1:RprMidiNote midiNote},${2:string property},${3:integer value})" },
		{ "trigger": "FNG_AddMidiNote", "contents": "reaper.FNG_AddMidiNote(${1:RprMidiTake midiTake})" },
		{ "trigger": "BR_EnvAlloc", "contents": "reaper.BR_EnvAlloc(${1:TrackEnvelope envelope},${2:boolean takeEnvelopesUseProjectTime})" },
		{ "trigger": "BR_EnvCountPoints", "contents": "reaper.BR_EnvCountPoints(${1:BR_Envelope envelope})" },
		{ "trigger": "BR_EnvDeletePoint", "contents": "reaper.BR_EnvDeletePoint(${1:BR_Envelope envelope},${2:integer id})" },
		{ "trigger": "BR_EnvFind", "contents": "reaper.BR_EnvFind(${1:BR_Envelope envelope},${2:number position},${3:number delta})" },
		{ "trigger": "BR_EnvFindNext", "contents": "reaper.BR_EnvFindNext(${1:BR_Envelope envelope},${2:number position})" },
		{ "trigger": "BR_EnvFindPrevious", "contents": "reaper.BR_EnvFindPrevious(${1:BR_Envelope envelope},${2:number position})" },
		{ "trigger": "BR_EnvFree", "contents": "reaper.BR_EnvFree(${1:BR_Envelope envelope},${2:boolean commit})" },
		{ "trigger": "BR_EnvGetParentTake", "contents": "reaper.BR_EnvGetParentTake(${1:BR_Envelope envelope})" },
		{ "trigger": "BR_EnvGetParentTrack", "contents": "reaper.BR_EnvGetParentTrack(${1:BR_Envelope envelope})" },
		{ "trigger": "BR_EnvGetPoint", "contents": "reaper.BR_EnvGetPoint(${1:BR_Envelope envelope},${2:integer id})" },
		{ "trigger": "BR_EnvGetProperties", "contents": "reaper.BR_EnvGetProperties(${1:BR_Envelope envelope})" },
		{ "trigger": "BR_EnvSetPoint", "contents": "reaper.BR_EnvSetPoint(${1:BR_Envelope envelope},${2:integer id},${3:number position},${4:number value},${5:integer shape},${6:boolean selected},${7:number bezier})" },
		{ "trigger": "BR_EnvSetProperties", "contents": "reaper.BR_EnvSetProperties(${1:BR_Envelope envelope},${2:boolean active},${3:boolean visible},${4:boolean armed},${5:boolean inLane},${6:integer laneHeight},${7:integer defaultShape},${8:boolean faderScaling})" },
		{ "trigger": "BR_EnvSortPoints", "contents": "reaper.BR_EnvSortPoints(${1:BR_Envelope envelope})" },
		{ "trigger": "BR_EnvValueAtPos", "contents": "reaper.BR_EnvValueAtPos(${1:BR_Envelope envelope},${2:number position})" },
		{ "trigger": "BR_GetArrangeView", "contents": "reaper.BR_GetArrangeView(${1:ReaProject proj})" },
		{ "trigger": "BR_GetClosestGridDivision", "contents": "reaper.BR_GetClosestGridDivision(${1:number position})" },
		{ "trigger": "BR_GetCurrentTheme", "contents": "reaper.BR_GetCurrentTheme()" },
		{ "trigger": "BR_GetMediaItemByGUID", "contents": "reaper.BR_GetMediaItemByGUID(${1:ReaProject proj},${2:string guidStringIn})" },
		{ "trigger": "BR_GetMediaItemGUID", "contents": "reaper.BR_GetMediaItemGUID(${1:MediaItem item})" },
		{ "trigger": "BR_GetMediaItemImageResource", "contents": "reaper.BR_GetMediaItemImageResource(${1:MediaItem item})" },
		{ "trigger": "BR_GetMediaItemTakeGUID", "contents": "reaper.BR_GetMediaItemTakeGUID(${1:MediaItem_Take take})" },
		{ "trigger": "BR_GetMediaSourceProperties", "contents": "reaper.BR_GetMediaSourceProperties(${1:MediaItem_Take take})" },
		{ "trigger": "BR_GetMediaTrackByGUID", "contents": "reaper.BR_GetMediaTrackByGUID(${1:ReaProject proj},${2:string guidStringIn})" },
		{ "trigger": "BR_GetMediaTrackFreezeCount", "contents": "reaper.BR_GetMediaTrackFreezeCount(${1:MediaTrack track})" },
		{ "trigger": "BR_GetMediaTrackGUID", "contents": "reaper.BR_GetMediaTrackGUID(${1:MediaTrack track})" },
		{ "trigger": "BR_GetMediaTrackLayouts", "contents": "reaper.BR_GetMediaTrackLayouts(${1:MediaTrack track})" },
		{ "trigger": "BR_GetMediaTrackSendInfo_Envelope", "contents": "reaper.BR_GetMediaTrackSendInfo_Envelope(${1:MediaTrack track},${2:integer category},${3:integer sendidx},${4:integer envelopeType})" },
		{ "trigger": "BR_GetMediaTrackSendInfo_Track", "contents": "reaper.BR_GetMediaTrackSendInfo_Track(${1:MediaTrack track},${2:integer category},${3:integer sendidx},${4:integer trackType})" },
		{ "trigger": "BR_GetMidiSourceLenPPQ", "contents": "reaper.BR_GetMidiSourceLenPPQ(${1:MediaItem_Take take})" },
		{ "trigger": "BR_GetMidiTakePoolGUID", "contents": "reaper.BR_GetMidiTakePoolGUID(${1:MediaItem_Take take})" },
		{ "trigger": "BR_GetMidiTakeTempoInfo", "contents": "reaper.BR_GetMidiTakeTempoInfo(${1:MediaItem_Take take})" },
		{ "trigger": "BR_GetMouseCursorContext", "contents": "reaper.BR_GetMouseCursorContext()" },
		{ "trigger": "BR_GetMouseCursorContext_Envelope", "contents": "reaper.BR_GetMouseCursorContext_Envelope()" },
		{ "trigger": "BR_GetMouseCursorContext_Item", "contents": "reaper.BR_GetMouseCursorContext_Item()" },
		{ "trigger": "BR_GetMouseCursorContext_MIDI", "contents": "reaper.BR_GetMouseCursorContext_MIDI()" },
		{ "trigger": "BR_GetMouseCursorContext_Position", "contents": "reaper.BR_GetMouseCursorContext_Position()" },
		{ "trigger": "BR_GetMouseCursorContext_StretchMarker", "contents": "reaper.BR_GetMouseCursorContext_StretchMarker()" },
		{ "trigger": "BR_GetMouseCursorContext_Take", "contents": "reaper.BR_GetMouseCursorContext_Take()" },
		{ "trigger": "BR_GetMouseCursorContext_Track", "contents": "reaper.BR_GetMouseCursorContext_Track()" },
		{ "trigger": "BR_GetNextGridDivision", "contents": "reaper.BR_GetNextGridDivision(${1:number position})" },
		{ "trigger": "BR_GetPrevGridDivision", "contents": "reaper.BR_GetPrevGridDivision(${1:number position})" },
		{ "trigger": "BR_GetSetTrackSendInfo", "contents": "reaper.BR_GetSetTrackSendInfo(${1:MediaTrack track},${2:integer category},${3:integer sendidx},${4:string parmname},${5:boolean setNewValue},${6:number newValue})" },
		{ "trigger": "BR_GetTakeFXCount", "contents": "reaper.BR_GetTakeFXCount(${1:MediaItem_Take take})" },
		{ "trigger": "BR_IsTakeMidi", "contents": "reaper.BR_IsTakeMidi(${1:MediaItem_Take take})" },
		{ "trigger": "BR_ItemAtMouseCursor", "contents": "reaper.BR_ItemAtMouseCursor()" },
		{ "trigger": "BR_MIDI_CCLaneRemove", "contents": "reaper.BR_MIDI_CCLaneRemove(${1:HWND midiEditor},${2:integer laneId})" },
		{ "trigger": "BR_MIDI_CCLaneReplace", "contents": "reaper.BR_MIDI_CCLaneReplace(${1:HWND midiEditor},${2:integer laneId},${3:integer newCC})" },
		{ "trigger": "BR_PositionAtMouseCursor", "contents": "reaper.BR_PositionAtMouseCursor(${1:boolean checkRuler})" },
		{ "trigger": "BR_SetArrangeView", "contents": "reaper.BR_SetArrangeView(${1:ReaProject proj},${2:number startTime},${3:number endTime})" },
		{ "trigger": "BR_SetItemEdges", "contents": "reaper.BR_SetItemEdges(${1:MediaItem item},${2:number startTime},${3:number endTime})" },
		{ "trigger": "BR_SetMediaItemImageResource", "contents": "reaper.BR_SetMediaItemImageResource(${1:MediaItem item},${2:string imageIn},${3:integer imageFlags})" },
		{ "trigger": "BR_SetMediaSourceProperties", "contents": "reaper.BR_SetMediaSourceProperties(${1:MediaItem_Take take},${2:boolean section},${3:number start},${4:number length},${5:number fade},${6:boolean reverse})" },
		{ "trigger": "BR_SetMediaTrackLayouts", "contents": "reaper.BR_SetMediaTrackLayouts(${1:MediaTrack track},${2:string mcpLayoutNameIn},${3:string tcpLayoutNameIn})" },
		{ "trigger": "BR_SetMidiTakeTempoInfo", "contents": "reaper.BR_SetMidiTakeTempoInfo(${1:MediaItem_Take take},${2:boolean ignoreProjTempo},${3:number bpm},${4:integer num},${5:integer den})" },
		{ "trigger": "BR_SetTakeSourceFromFile", "contents": "reaper.BR_SetTakeSourceFromFile(${1:MediaItem_Take take},${2:string filenameIn},${3:boolean inProjectData})" },
		{ "trigger": "BR_SetTakeSourceFromFile2", "contents": "reaper.BR_SetTakeSourceFromFile2(${1:MediaItem_Take take},${2:string filenameIn},${3:boolean inProjectData},${4:boolean keepSourceProperties})" },
		{ "trigger": "BR_TakeAtMouseCursor", "contents": "reaper.BR_TakeAtMouseCursor()" },
		{ "trigger": "BR_TrackAtMouseCursor", "contents": "reaper.BR_TrackAtMouseCursor()" },
		{ "trigger": "BR_TrackFX_GetFXModuleName", "contents": "reaper.BR_TrackFX_GetFXModuleName(${1:MediaTrack track},${2:integer fx})" },
		{ "trigger": "BR_Win32_GetPrivateProfileString", "contents": "reaper.BR_Win32_GetPrivateProfileString(${1:string sectionName},${2:string keyName},${3:string defaultString},${4:string filePath})" },
		{ "trigger": "BR_Win32_ShellExecute", "contents": "reaper.BR_Win32_ShellExecute(${1:string operation},${2:string file},${3:string parameters},${4:string directory},${5:integer showFlags})" },
		{ "trigger": "BR_Win32_WritePrivateProfileString", "contents": "reaper.BR_Win32_WritePrivateProfileString(${1:string sectionName},${2:string keyName},${3:string value},${4:string filePath})" },
		{ "trigger": "ULT_GetMediaItemNote", "contents": "reaper.ULT_GetMediaItemNote(${1:MediaItem item})" },
		{ "trigger": "ULT_SetMediaItemNote", "contents": "reaper.ULT_SetMediaItemNote(${1:MediaItem item},${2:string note})" },
		{ "trigger": "atexit", "contents": "reaper.atexit($1:{function name or anonymous function definition})" },
		{ "trigger": "defer", "contents": "reaper.defer(${1:function name or anonymous function definition})" },
		{ "trigger": "get_action_context", "contents": "reaper.get_action_context()" },
		{ "trigger": "gfx.arc", "contents": "gfx.arc(${1:x},${2:y},${3:r},${4:ang1},${5:ang2}[,${6:antialias]})" },
		{ "trigger": "gfx.blit", "contents": "gfx.blit(${1:source}, ${2:scale}, ${3:rotation}[, ${4:srcx}, ${5:srcy}, ${6:srcw}, ${7:srch}, ${8:destx}, ${9:desty}, ${10:destw}, ${11:desth}, ${12:rotxoffs}, ${13:rotyoffs]})" },
		{ "trigger": "gfx.blit", "contents": "gfx.blit(${1:source},${2:scale},${3:rotation})" },
		{ "trigger": "gfx.blitext", "contents": "gfx.blitext(${1:source},${2:coordinatelist},${3:rotation})" },
		{ "trigger": "gfx.blurto", "contents": "gfx.blurto(${1:x},${2:y})" },
		{ "trigger": "gfx.circle", "contents": "gfx.circle(${1:x},${2:y},${3:r}[,${4:fill},${5:antialias]})" },
		{ "trigger": "gfx.clienttoscreen", "contents": "gfx.clienttoscreen(${1:x},${2:y})" },
		{ "trigger": "gfx.deltablit", "contents": "gfx.deltablit(${1:srcimg},${2:srcx},${3:srcy},${4:srcw},${5:srch},${6:destx},${7:desty},${8:destw},${9:desth},${10:dsdx},${11:dtdx},${12:dsdy},${13:dtdy},${14:dsdxdy},${15:dtdxdy})" },
		{ "trigger": "gfx.dock", "contents": "gfx.dock(${1:v}[,${2:wx},${3:wy},${4:ww},${5:wh]})" },
		{ "trigger": "gfx.drawchar", "contents": "gfx.drawchar(${1:char})" },
		{ "trigger": "gfx.drawnumber", "contents": "gfx.drawnumber(${1:n},${2:ndigits})" },
		{ "trigger": "gfx.drawstr", "contents": "gfx.drawstr(${1:str})" },
		{ "trigger": "gfx.getchar", "contents": "gfx.getchar(${1:[char]})" },
		{ "trigger": "gfx.getfont", "contents": "gfx.getfont()" },
		{ "trigger": "gfx.getimgdim", "contents": "gfx.getimgdim(${1:handle})" },
		{ "trigger": "gfx.getpixel", "contents": "gfx.getpixel()" },
		{ "trigger": "gfx.gradrect", "contents": "gfx.gradrect(${1:x},${2:y},${3:w},${4:h}, ${5:r},${6:g},${7:b},${8:a}[, ${9:drdx}, ${10:dgdx}, ${11:dbdx}, ${12:dadx}, ${13:drdy}, ${14:dgdy}, ${15:dbdy}, ${16:dady]})" },
		{ "trigger": "gfx.init", "contents": "gfx.init(${1:name}[,${2:width},${3:height},${4:dockstate},${5:xpos},${6:ypos]})" },
		{ "trigger": "gfx.line", "contents": "gfx.line(${1:x},${2:y},${3:x2},${4:y2}[,${5:aa]})" },
		{ "trigger": "gfx.lineto", "contents": "gfx.lineto(${1:x},${2:y}[,${3:aa]})" },
		{ "trigger": "gfx.loadimg", "contents": "gfx.loadimg(${1:image},${2:filename})" },
		{ "trigger": "gfx.measurechar", "contents": "gfx.measurechar(${1:char})" },
		{ "trigger": "gfx.measurestr", "contents": "gfx.measurestr(${1:str})" },
		{ "trigger": "gfx.muladdrect", "contents": "gfx.muladdrect(${1:x},${2:y},${3:w},${4:h},${5:mul_r},${6:mul_g},${7:mul_b}[,${8:mul_a},${9:add_r},${10:add_g},${11:add_b},${12:add_a]})" },
		{ "trigger": "gfx.printf", "contents": "gfx.printf(${1:format}[, ...])" },
		{ "trigger": "gfx.quit", "contents": "gfx.quit()" },
		{ "trigger": "gfx.rect", "contents": "gfx.rect(${1:x},${2:y},${3:w},${4:h}[,${5:filled]})" },
		{ "trigger": "gfx.rectto", "contents": "gfx.rectto(${1:x},${2:y})" },
		{ "trigger": "gfx.roundrect", "contents": "gfx.roundrect(${1:x},${2:y},${3:w},${4:h},${5:radius}[,${6:antialias]})" },
		{ "trigger": "gfx.screentoclient", "contents": "gfx.screentoclient(${1:x},${2:y})" },
		{ "trigger": "gfx.set", "contents": "gfx.set(${1:r}[,${2:g},${3:b},${4:a},${5:mode},${6:dest]})" },
		{ "trigger": "gfx.setcursor", "contents": "gfx.setcursor(${1:resource_id},${2:custom_cursor_name})" },
		{ "trigger": "gfx.setfont", "contents": "gfx.setfont(${1:idx}[,${2:fontface}, ${3:sz}, ${4:flags]})" },
		{ "trigger": "gfx.setimgdim", "contents": "gfx.setimgdim(${1:image},${2:w},${3:h})" },
		{ "trigger": "gfx.setpixel", "contents": "gfx.setpixel(${1:r},${2:g},${3:b})" },
		{ "trigger": "gfx.showmenu", "contents": "gfx.showmenu(${1:str})" },
		{ "trigger": "gfx.transformblit", "contents": "gfx.transformblit(${1:srcimg},${2:destx},${3:desty},${4:destw},${5:desth},${6:div_w},${7:div_h},${8:table})" },
		{ "trigger": "gfx.triangle", "contents": "gfx.triangle(${1:x1},${2:y1},${3:x2},${4:y2},${5:x3},${6:y3}${7:[x4},${8:y4}...])" },
		{ "trigger": "gfx.update", "contents": "gfx.update()" },
		{ "trigger": "new_array", "contents": "reaper.new_array(${1:[table}|${2:array]}${3:[size]})" },
		{ "trigger": "runloop", "contents": "reaper.runloop(${1:function} ${2:name} ${3:or} ${4:anonymous} ${5:function} ${6:definition})" },
		{ "trigger": "{reaper.array}.clear", "contents": "{reaper.array}.clear(${1:[value}, ${2:offset}, ${3:size]})" },
		{ "trigger": "{reaper.array}.convolve", "contents": "{reaper.array}.convolve(${1:[src}, ${2:srcoffs}, ${3:size}, ${4:destoffs]})" },
		{ "trigger": "{reaper.array}.copy", "contents": "{reaper.array}.copy(${1:[src}, ${2:srcoffs}, ${3:size}, ${4:destoffs]})" },
		{ "trigger": "{reaper.array}.fft", "contents": "{reaper.array}.fft(${1:size}[, ${2:permute}, ${3:offset]})" },
		{ "trigger": "{reaper.array}.get_alloc", "contents": "{reaper.array}.get_alloc()" },
		{ "trigger": "{reaper.array}.ifft", "contents": "{reaper.array}.ifft(${1:size}[, ${2:permute}, ${3:offset]})" },
		{ "trigger": "{reaper.array}.multiply", "contents": "{reaper.array}.multiply(${1:[src}, ${2:srcoffs}, ${3:size}, ${4:destoffs]})" },
		{ "trigger": "{reaper.array}.resize", "contents": "{reaper.array}.resize(${1:size})" },
		{ "trigger": "{reaper.array}.table", "contents": "{reaper.array}.table(${1:[offset}, ${2:size]})" },
		{ "trigger": "gfx_r", "contents": "gfx_r" },
		{ "trigger": "gfx_g", "contents": "gfx_g" },
		{ "trigger": "gfx_b", "contents": "gfx_b" },
		{ "trigger": "gfx_a", "contents": "gfx_a" },
		{ "trigger": "gfx_w", "contents": "gfx_w" },
		{ "trigger": "gfx_h", "contents": "gfx_h" },
		{ "trigger": "gfx_x", "contents": "gfx_x" },
		{ "trigger": "gfx_y", "contents": "gfx_y" },
		{ "trigger": "gfx_mode", "contents": "gfx_mode" },
		{ "trigger": "gfx_a", "contents": "gfx_a" },
		{ "trigger": "gfx_mode", "contents": "gfx_mode" },
		{ "trigger": "gfx_clear", "contents": "gfx_clear" },
		{ "trigger": "gfx_dest", "contents": "gfx_dest" },
		{ "trigger": "gfx_texth", "contents": "gfx_texth" },
		{ "trigger": "gfx_ext_retina", "contents": "gfx_ext_retina" },
		{ "trigger": "mouse_x", "contents": "mouse_x" },
		{ "trigger": "mouse_y", "contents": "mouse_y" },
		{ "trigger": "mouse_x", "contents": "mouse_x" },
		{ "trigger": "mouse_y", "contents": "mouse_y" },
		{ "trigger": "mouse_wheel", "contents": "mouse_wheel" },
		{ "trigger": "mouse_hwheel", "contents": "mouse_hwheel" },
		{ "trigger": "mouse_cap", "contents": "mouse_cap" },
	
	]
}