{
	"scope": "source.jesusonic",

	"completions":
	[
		{ "trigger": "__memtop", "contents": "__memtop()" },
		{ "trigger": "__denormal_likely", "contents": "__denormal_likely()" },
		{ "trigger": "__denormal_unlikely", "contents": "__denormal_unlikely()" },
		{ "trigger": "abs", "contents": "abs(${1:value})" },
		{ "trigger": "acos", "contents": "acos(${1:value})" },
		{ "trigger": "asin", "contents": "asin(${1:value})" },
		{ "trigger": "atan", "contents": "atan(${1:value})" },
		{ "trigger": "atan2", "contents": "atan2(${1:numerator}, ${2:denominator})" },
		{ "trigger": "atomic_add", "contents": "atomic_add(${1:dest_val1}, ${2:val2})" },
		{ "trigger": "atomic_exch", "contents": "atomic_exch(${1:val1}, ${2:val2})" },
		{ "trigger": "atomic_get", "contents": "atomic_get(${1:val})" },
		{ "trigger": "atomic_set", "contents": "atomic_set(${1:dest_val1}, ${2:val2})" },
		{ "trigger": "atomic_setifequal", "contents": "atomic_setifequal(${1:dest}, ${2:value}, ${3:newvalue})" },
		{ "trigger": "ceil", "contents": "ceil(${1:value})" },
		{ "trigger": "convolve_c", "contents": "convolve_c(${1:dest}, ${2:src}, ${3:size})" },
		{ "trigger": "cos", "contents": "cos(${1:angle})" },
		{ "trigger": "exp", "contents": "exp(${1:exponent})" },
		{ "trigger": "export_buffer_to_project", "contents": "export_buffer_to_project(${1:buffer}, ${2:length}, ${3:nch}, ${4:samplerate}, ${5:track_idx}, ${6:flags}, ${7:tempo})" },
		{ "trigger": "fft", "contents": "fft(${1:buffer}, ${2:size})" },
		{ "trigger": "fft_ipermute", "contents": "fft_ipermute(${1:buffer}, ${2:size})" },

		{ "trigger": "fft_real", "contents": "fft_real(${1:buffer}, ${2:size})" },
		{ "trigger": "ifft_real ", "contents": "ifft_real (${1:buffer}, ${2:size})" },


		{ "trigger": "fft_permute", "contents": "fft_permute(${1:buffer}, ${2:size})" },
		{ "trigger": "file_avail", "contents": "file_avail(${1:handle})" },
		{ "trigger": "file_close", "contents": "file_close(${1:handle})" },
		{ "trigger": "file_mem", "contents": "file_mem(${1:handle}, ${2:offset},  ${3:length})" },
		{ "trigger": "file_open", "contents": "file_open(${1:indexOrSlider})" },
		{ "trigger": "file_rewind", "contents": "file_rewind(${1:handle})" },
		{ "trigger": "file_riff", "contents": "file_riff(${1:handle}, ${2:nch}, ${3:samplrate})" },
		{ "trigger": "file_string", "contents": "file_string(${1:handle}, ${2:str})" },
		{ "trigger": "file_text", "contents": "file_text(${1:handle}, ${2:istext})" },
		{ "trigger": "file_var", "contents": "file_var(${1:handle}, ${2:variable})" },
		{ "trigger": "floor", "contents": "floor(${1:value})" },
		{ "trigger": "freembuf", "contents": "freembuf(${1:address})" },
		{ "trigger": "gfx_arc", "contents": "gfx_arc(${1:x}, ${2:y}, ${3:r}, ${4:ang1}, ${5:ang2}, ${6:antialiasOptional})" },
		{ "trigger": "gfx_blit", "contents": "gfx_blit(${1:source}, ${2:scale}, ${3:rotation}, ${4:srcxOptional}, ${5:srcyOptional}, ${6:srcwOptional}, ${7:srchOptional}, ${8:destxOptional}, ${9:destyOptional}, ${10:destwOptional}, ${11:desthOptional}, ${12:rotxoffsOptional}, ${13:rotyoffsOptional})" },
		{ "trigger": "gfx_blitext", "contents": "gfx_blitext(${1:source}, ${2:coordinatelist}, ${3:rotation})" },
		{ "trigger": "gfx_blurto", "contents": "gfx_blurto(${1:x}, ${2:y})" },
		{ "trigger": "gfx_circle", "contents": "gfx_circle(${1:x}, ${2:y}, ${3:r}, ${4:fillOptional}, ${5:antialiasOptional})" },
		{ "trigger": "gfx_deltablit", "contents": "gfx_deltablit(${1:srcimg}, ${2:srcx}, ${3:srcy}, ${4:srcw}, ${5:srch}, ${6:destx}, ${7:desty}, ${8:destw}, ${9:desth}, ${10:dsdx}, ${11:dtdx}, ${12:dsdy}, ${13:dtdy}, ${14:dsdxdy}, ${15:dtdxdy})" },
		{ "trigger": "gfx_drawchar", "contents": "gfx_drawchar(${1:char})" },
		{ "trigger": "gfx_drawnumber", "contents": "gfx_drawnumber(${1:n}, ${2:ndigits})" },
		{ "trigger": "gfx_drawstr", "contents": "gfx_drawstr(${1:str})" },
		{ "trigger": "gfx_getchar", "contents": "gfx_getchar(${1:charOptional})" },
		{ "trigger": "gfx_getfont", "contents": "gfx_getfont()" },
		{ "trigger": "gfx_getimgdim", "contents": "gfx_getimgdim(${1:image}, ${2:w}, ${3:h})" },
		{ "trigger": "gfx_getpixel", "contents": "gfx_getpixel(${1:r}, ${2:g}, ${3:b})" },
		{ "trigger": "gfx_gradrect", "contents": "gfx_gradrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:r}, ${6:g}, ${7:b}, ${8:a}, ${9:drdxOptional}, ${10:dgdxOptional}, ${11:dbdxOptional}, ${12:dadxOptional}, ${13:drdyOptional}, ${14:dgdyOptional}, ${15:dbdyOptional}, ${16:dadyOptional})" },
		{ "trigger": "gfx_line", "contents": "gfx_line(${1:x}, ${2:y}, ${3:x2}, ${4:y2}, ${5:aaOptional})" },
		{ "trigger": "gfx_lineto", "contents": "gfx_lineto(${1:x}, ${2:y}, ${3:aaOptional})" },
		{ "trigger": "gfx_loadimg", "contents": "gfx_loadimg(${1:image}, ${2:filename})" },
		{ "trigger": "gfx_measurestr", "contents": "gfx_measurestr(${1:str}, ${2:w}, ${3:h})" },
		{ "trigger": "gfx_muladdrect", "contents": "gfx_muladdrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:mul_r}, ${6:mul_g}, ${7:mul_b}, ${8:mul_aOptional}, ${9:add_rOptional}, ${10:add_gOptional}, ${11:add_bOptional}, ${12:add_aOptional})" },
		{ "trigger": "gfx_printf", "contents": "gfx_printf(${1:format}, ${2:variable1})" },
		{ "trigger": "gfx_rect", "contents": "gfx_rect(${1:x}, ${2:y}, ${3:w}, ${4:h})" },
		{ "trigger": "gfx_rectto", "contents": "gfx_rectto(${1:x}, ${2:y})" },
		{ "trigger": "gfx_roundrect", "contents": "gfx_roundrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:radius}, ${6:antialiasOptional})" },
		{ "trigger": "gfx_setfont", "contents": "gfx_setfont(${1:idx}, ${2:fontfaceOptional}, ${3:szOptional}, ${4:flagsOptional})" },
		{ "trigger": "gfx_setimgdim", "contents": "gfx_setimgdim(${1:image}, ${2:w}, ${3:h})" },
		{ "trigger": "gfx_setpixel", "contents": "gfx_setpixel(${1:r}, ${2:g}, ${3:b})" },
		{ "trigger": "gfx_transformblit", "contents": "gfx_transformblit(${1:srcimg}, ${2:destx}, ${3:desty}, ${4:destw}, ${5:desth}, ${6:div_w}, ${7:div_h}, ${8:table})" },
		{ "trigger": "ifft", "contents": "ifft(${1:buffer}, ${2:size})" },
		{ "trigger": "imdct", "contents": "imdct(${1:buffer}, ${2:size})" },
		{ "trigger": "invsqrt", "contents": "invsqrt(${1:value})" },
		{ "trigger": "log", "contents": "log(${1:value})" },
		{ "trigger": "log10", "contents": "log10(${1:value})" },
		{ "trigger": "match", "contents": "match(${1:needle}, ${2:haystack}, ${3:variable1})" },
		{ "trigger": "matchi", "contents": "matchi(${1:needle}, ${2:haystack}, ${3:variable1})" },
		{ "trigger": "max", "contents": "max(${1:value}, ${2:value})" },
		{ "trigger": "mdct", "contents": "mdct(${1:buffer}, ${2:size})" },
		{ "trigger": "memcpy", "contents": "memcpy(${1:dest}, ${2:src}, ${3:length})" },
		{ "trigger": "memset", "contents": "memset(${1:offset}, ${2:value}, ${3:length})" },
		{ "trigger": "mem_get_values", "contents": "mem_get_values(${1:offset}, ${2:...})" },
		{ "trigger": "mem_set_values", "contents": "mem_set_values(${1:offset}, ${2:...})" },
		{ "trigger": "midirecv", "contents": "midirecv(${1:offset}, ${2:msg1}, ${3:msg2}, ${4:msg3})" },
		{ "trigger": "midirecv_buf", "contents": "midirecv_buf(${1:offset}, ${2:buf}, ${3:len})" },
		{ "trigger": "midirecv_str", "contents": "midirecv_str(${1:offset}, ${2:string})" },
		{ "trigger": "midisend", "contents": "midisend(${1:offset}, ${2:msg1}, ${3:msg2}, ${4:msg3})" },
		{ "trigger": "midisend_buf", "contents": "midisend_buf(${1:offset}, ${2:buf}, ${3:len})" },
		{ "trigger": "midisend_str", "contents": "midisend_str(${1:offset}, ${2:string})" },
		{ "trigger": "midisyx", "contents": "midisyx(${1:offset}, ${2:msgptr}, ${3:len})" },
		{ "trigger": "min", "contents": "min(${1:value}, ${2:value})" },
		{ "trigger": "pow", "contents": "pow(${1:base}, ${2:exponent})" },
		{ "trigger": "printf", "contents": "printf(${1:format}, ${2:variable1})" },
		{ "trigger": "rand", "contents": "rand(${1:maxOptional})" },
		{ "trigger": "sign", "contents": "sign(${1:value})" },
		{ "trigger": "sin", "contents": "sin(${1:angle})" },
		{ "trigger": "slider_automate", "contents": "imdct(${1:slider})" },
		{ "trigger": "sliderchange", "contents": "imdct(${1:slider})" },
		{ "trigger": "spl", "contents": "spl(${1:channelIndex})" },
		{ "trigger": "sprintf", "contents": "sprintf(${1:#dest}, ${2:format}, ${3:variable1})" },
		{ "trigger": "sqr", "contents": "sqr(${1:value})" },
		{ "trigger": "sqrt", "contents": "sqrt(${1:value})" },
		{ "trigger": "stack_exch", "contents": "stack_exch(${1:value})" },
		{ "trigger": "stack_peek", "contents": "stack_peek(${1:index})" },
		{ "trigger": "stack_pop", "contents": "stack_pop(${1:value})" },
		{ "trigger": "stack_push", "contents": "stack_push(${1:value})" },
		{ "trigger": "str_delsub", "contents": "str_delsub(${1:#str}, ${2:pos}, ${3:len})" },
		{ "trigger": "str_getchar", "contents": "str_getchar(${1:str}, ${2:offset}, ${3:typeOptional})" },
		{ "trigger": "str_insert", "contents": "str_insert(${1:#str}, ${2:srcstr}, ${3:pos})" },
		{ "trigger": "str_setchar", "contents": "str_setchar(${1:#str}, ${2:offset}, ${3:val}, ${4:typeOptional})" },
		{ "trigger": "str_setlen", "contents": "str_setlen(${1:#str}, ${2:len})" },
		{ "trigger": "strcat", "contents": "strcat(${1:#str}, ${2:srcstr})" },
		{ "trigger": "strcmp", "contents": "strcmp(${1:str}, ${2:str2})" },
		{ "trigger": "strcpy", "contents": "strcpy(${1:#str}, ${2:srcstr})" },
		{ "trigger": "strcpy_from", "contents": "strcpy_from(${1:#str}, ${2:srcstr}, ${3:offset})" },
		{ "trigger": "strcpy_fromslider", "contents": "strcpy_fromslider(${1:str}, ${2:slider})" },
		{ "trigger": "strcpy_substr", "contents": "strcpy_substr(${1:#str}, ${2:srcstr}, ${3:offs}, ${4:ml})" },
		{ "trigger": "stricmp", "contents": "stricmp(${1:str}, ${2:str2})" },
		{ "trigger": "strlen", "contents": "strlen(${1:str})" },
		{ "trigger": "strncat", "contents": "strncat(${1:#str}, ${2:srcstr}, ${3:maxlen})" },
		{ "trigger": "strncmp", "contents": "strncmp(${1:str}, ${2:str2}, ${3:maxlen})" },
		{ "trigger": "strncpy", "contents": "strncpy(${1:#str}, ${2:srcstr}, ${3:maxlen})" },
		{ "trigger": "strnicmp", "contents": "strnicmp(${1:str}, ${2:str2}, ${3:maxlen})" },
		{ "trigger": "tan", "contents": "tan(${1:angle})" },
		{ "trigger": "time", "contents": "time(${1:valOptional})" },
		{ "trigger": "time_precise", "contents": "time_precise(${1:valOptional})" },
	]
}